schema {
  query: RootQuery
  mutation: RootMutation
}

input AddCartItemsInput {
  clientMutationId: String
  items: [CartItemInput]
}

type AddCartItemsPayload {
  added: [CartItem]
  cart: Cart
  cartErrors: [CartItemError]
  clientMutationId: String
}

input AddFeeInput {
  amount: Float
  clientMutationId: String
  name: String!
  taxClass: TaxClassEnum
  taxable: Boolean
}

type AddFeePayload {
  cart: Cart
  cartFee: CartFee
  clientMutationId: String
}

input AddToCartInput {
  clientMutationId: String
  extraData: String
  productId: Int!
  quantity: Int
  variation: [ProductAttributeInput]
  variationId: Int
}

type AddToCartPayload {
  cart: Cart
  cartItem: CartItem
  clientMutationId: String
}

type AppliedCoupon {
  code: String!
  discountAmount(excludeTax: Boolean): String!
  discountTax: String!
}

input ApplyCouponInput {
  clientMutationId: String
  code: String!
}

type ApplyCouponPayload {
  applied: AppliedCoupon
  cart: Cart
  clientMutationId: String
}

interface Attribute {
  name: String
  value: String
}

type Avatar {
  default: String
  extraAttr: String
  forceDefault: Boolean
  foundAvatar: Boolean
  height: Int
  isRestricted: Boolean
  rating: String
  scheme: String
  size: Int
  url: String
  width: Int
}

enum AvatarRatingEnum {
  G
  PG
  R
  X
}

enum BackordersEnum {
  NO
  NOTIFY
  YES
}

type Cart {
  appliedCoupons: [AppliedCoupon]
  availableShippingMethods: [ShippingPackage]
  chosenShippingMethods: [String]
  contents(first: Int, last: Int, after: String, before: String, where: CartToCartItemConnectionWhereArgs): CartToCartItemConnection
  contentsTax: String
  contentsTotal: String
  discountTax: String
  discountTotal: String
  displayPricesIncludeTax: Boolean
  feeTax: String
  feeTotal: String
  fees: [CartFee]
  isEmpty: Boolean
  needsShippingAddress: Boolean
  shippingTax: String
  shippingTotal: String
  subtotal: String
  subtotalTax: String
  total: String
  totalTax: String
  totalTaxes: [CartTax]
}

interface CartError {
  reasons: [String]
  type: CartErrorType!
}

enum CartErrorType {
  INVALID_CART_ITEM
  INVALID_COUPON
  INVALID_SHIPPING_METHOD
}

type CartFee {
  amount: Float
  id: ID!
  name: String!
  taxClass: TaxClassEnum
  taxable: Boolean
  total: Float
}

type CartItem {
  extraData(key: String, keysIn: [String]): [MetaData]
  key: ID!
  product: CartItemToProductConnectionEdge
  quantity: Int
  subtotal: String
  subtotalTax: String
  tax: String
  total: String
  variation: CartItemToProductVariationConnectionEdge
}

type CartItemError implements CartError {
  extraData: String
  productId: Int!
  quantity: Int
  reasons: [String]
  type: CartErrorType!
  variation: [ProductAttributeOutput]
  variationId: Int
}

input CartItemInput {
  extraData: String
  productId: Int!
  quantity: Int
  variation: [ProductAttributeInput]
  variationId: Int
}

input CartItemQuantityInput {
  key: ID!
  quantity: Int!
}

type CartItemToProductConnectionEdge {
  node: Product
  simpleVariations: [SimpleAttribute]
}

type CartItemToProductVariationConnectionEdge {
  attributes: [VariationAttribute]
  node: ProductVariation
}

type CartTax {
  amount: String
  id: ID!
  isCompound: Boolean
  label: String!
}

type CartToCartItemConnection {
  edges: [CartToCartItemConnectionEdge]
  itemCount: Int
  nodes: [CartItem]
  pageInfo: WPPageInfo
  productCount: Int
}

type CartToCartItemConnectionEdge {
  cursor: String
  node: CartItem
}

input CartToCartItemConnectionWhereArgs {
  needsShipping: Boolean
}

enum CatalogVisibilityEnum {
  CATALOG
  HIDDEN
  SEARCH
  VISIBLE
}

type Category implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier & HierarchicalTermNode & MenuItemLinkable {
  ancestors(first: Int, last: Int, after: String, before: String): CategoryToAncestorsCategoryConnection
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  children(first: Int, last: Int, after: String, before: String, where: CategoryToCategoryConnectionWhereArgs): CategoryToCategoryConnection
  contentNodes(first: Int, last: Int, after: String, before: String, where: CategoryToContentNodeConnectionWhereArgs): CategoryToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  parent: CategoryToParentCategoryConnectionEdge
  parentDatabaseId: Int
  parentId: ID
  posts(first: Int, last: Int, after: String, before: String, where: CategoryToPostConnectionWhereArgs): CategoryToPostConnection
  seo: TaxonomySEO
  slug: String
  taxonomy: CategoryToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum CategoryIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type CategoryToAncestorsCategoryConnection {
  edges: [CategoryToAncestorsCategoryConnectionEdge]
  nodes: [Category]
  pageInfo: WPPageInfo
}

type CategoryToAncestorsCategoryConnectionEdge {
  cursor: String
  node: Category
}

type CategoryToCategoryConnection {
  edges: [CategoryToCategoryConnectionEdge]
  nodes: [Category]
  pageInfo: WPPageInfo
}

type CategoryToCategoryConnectionEdge {
  cursor: String
  node: Category
}

input CategoryToCategoryConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type CategoryToContentNodeConnection {
  edges: [CategoryToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type CategoryToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input CategoryToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfCategoryEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type CategoryToParentCategoryConnectionEdge {
  node: Category
}

type CategoryToPostConnection {
  edges: [CategoryToPostConnectionEdge]
  nodes: [Post]
  pageInfo: WPPageInfo
}

type CategoryToPostConnectionEdge {
  cursor: String
  node: Post
}

input CategoryToPostConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  categoryId: Int
  categoryIn: [ID]
  categoryName: String
  categoryNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  tag: String
  tagId: String
  tagIn: [ID]
  tagNotIn: [ID]
  tagSlugAnd: [String]
  tagSlugIn: [String]
  title: String
}

type CategoryToTaxonomyConnectionEdge {
  node: Taxonomy
}

input CheckoutInput {
  account: CreateAccountInput
  billing: CustomerAddressInput
  clientMutationId: String
  customerNote: String
  isPaid: Boolean
  metaData: [MetaDataInput]
  paymentMethod: String
  shipToDifferentAddress: Boolean
  shipping: CustomerAddressInput
  shippingMethod: [String]
  transactionId: String
}

type CheckoutPayload {
  clientMutationId: String
  customer: Customer
  order: Order
  redirect: String
  result: String
}

type Comment implements Node & DatabaseIdentifier {
  agent: String
  approved: Boolean
  author: CommentToCommenterConnectionEdge
  authorIp: String
  commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  commentedOn: CommentToContentNodeConnectionEdge
  content(format: PostObjectFieldFormatEnum): String
  databaseId: Int!
  date: String
  dateGmt: String
  id: ID!
  isRestricted: Boolean
  karma: Int
  parent(where: CommentToParentCommentConnectionWhereArgs): CommentToParentCommentConnectionEdge
  parentDatabaseId: Int
  parentId: ID
  replies(first: Int, last: Int, after: String, before: String, where: CommentToCommentConnectionWhereArgs): CommentToCommentConnection
  type: String
}

type CommentAuthor implements Node & Commenter {
  databaseId: Int!
  email: String
  id: ID!
  isRestricted: Boolean
  name: String
  url: String
}

type CommentToCommentConnection {
  edges: [CommentToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type CommentToCommentConnectionEdge {
  cursor: String
  node: Comment
}

input CommentToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type CommentToCommenterConnectionEdge {
  node: Commenter
}

type CommentToContentNodeConnectionEdge {
  node: ContentNode
}

type CommentToParentCommentConnectionEdge {
  node: Comment
}

input CommentToParentCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

interface Commenter {
  databaseId: Int!
  email: String
  id: ID!
  isRestricted: Boolean
  name: String
  url: String
}

enum CommentsConnectionOrderbyEnum {
  COMMENT_AGENT
  COMMENT_APPROVED
  COMMENT_AUTHOR
  COMMENT_AUTHOR_EMAIL
  COMMENT_AUTHOR_IP
  COMMENT_AUTHOR_URL
  COMMENT_CONTENT
  COMMENT_DATE
  COMMENT_DATE_GMT
  COMMENT_ID
  COMMENT_IN
  COMMENT_KARMA
  COMMENT_PARENT
  COMMENT_POST_ID
  COMMENT_TYPE
  USER_ID
}

interface ContentNode implements Node & UniformResourceIdentifiable {
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  guid: String
  id: ID!
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  link: String
  modified: String
  modifiedGmt: String
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  slug: String
  status: String
  template: ContentTemplate
  uri: String
}

enum ContentNodeIdTypeEnum {
  DATABASE_ID
  ID
  URI
}

type ContentNodeToContentTypeConnectionEdge {
  node: ContentType
}

type ContentNodeToEditLastConnectionEdge {
  node: User
}

type ContentNodeToEditLockConnectionEdge {
  lockTimestamp: String
  node: User
}

type ContentNodeToEnqueuedScriptConnection {
  edges: [ContentNodeToEnqueuedScriptConnectionEdge]
  nodes: [EnqueuedScript]
  pageInfo: WPPageInfo
}

type ContentNodeToEnqueuedScriptConnectionEdge {
  cursor: String
  node: EnqueuedScript
}

type ContentNodeToEnqueuedStylesheetConnection {
  edges: [ContentNodeToEnqueuedStylesheetConnectionEdge]
  nodes: [EnqueuedStylesheet]
  pageInfo: WPPageInfo
}

type ContentNodeToEnqueuedStylesheetConnectionEdge {
  cursor: String
  node: EnqueuedStylesheet
}

union ContentRevisionUnion = Post | Page

interface ContentTemplate {
  templateName: String
}

type ContentType implements Node & UniformResourceIdentifiable {
  canExport: Boolean
  connectedTaxonomies(first: Int, last: Int, after: String, before: String): ContentTypeToTaxonomyConnection
  contentNodes(first: Int, last: Int, after: String, before: String, where: ContentTypeToContentNodeConnectionWhereArgs): ContentTypeToContentNodeConnection
  deleteWithUser: Boolean
  description: String
  excludeFromSearch: Boolean
  graphqlPluralName: String
  graphqlSingleName: String
  hasArchive: Boolean
  hierarchical: Boolean
  id: ID!
  isContentNode: Boolean!
  isFrontPage: Boolean!
  isPostsPage: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  label: String
  labels: PostTypeLabelDetails
  menuIcon: String
  menuPosition: Int
  name: String
  public: Boolean
  publiclyQueryable: Boolean
  restBase: String
  restControllerClass: String
  showInAdminBar: Boolean
  showInGraphql: Boolean
  showInMenu: Boolean
  showInNavMenus: Boolean
  showInRest: Boolean
  showUi: Boolean
  uri: String
}

enum ContentTypeEnum {
  ATTACHMENT
  PAGE
  POST
  PRODUCT
  PRODUCT_VARIATION
  SHOP_COUPON
  SHOP_ORDER
  SHOP_ORDER_REFUND
}

enum ContentTypeIdTypeEnum {
  ID
  NAME
}

type ContentTypeToContentNodeConnection {
  edges: [ContentTypeToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type ContentTypeToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input ContentTypeToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type ContentTypeToTaxonomyConnection {
  edges: [ContentTypeToTaxonomyConnectionEdge]
  nodes: [Taxonomy]
  pageInfo: WPPageInfo
}

type ContentTypeToTaxonomyConnectionEdge {
  cursor: String
  node: Taxonomy
}

enum ContentTypesOfCategoryEnum {
  POST
}

enum ContentTypesOfPaColorEnum {
  PRODUCT
}

enum ContentTypesOfPaSizeEnum {
  PRODUCT
}

enum ContentTypesOfPaWidthEnum {
  PRODUCT
}

enum ContentTypesOfPostFormatEnum {
  POST
}

enum ContentTypesOfProductCategoryEnum {
  PRODUCT
}

enum ContentTypesOfProductTagEnum {
  PRODUCT
}

enum ContentTypesOfProductTypeEnum {
  PRODUCT
}

enum ContentTypesOfShippingClassEnum {
  PRODUCT
  PRODUCT_VARIATION
}

enum ContentTypesOfTagEnum {
  POST
}

enum ContentTypesOfVisibleProductEnum {
  PRODUCT
  PRODUCT_VARIATION
}

enum CountriesEnum {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}

type Coupon implements Node {
  amount: Float
  code: String
  databaseId: Int
  date: String
  dateExpiry: String
  description: String
  discountType: DiscountTypeEnum
  emailRestrictions: [String]
  excludeSaleItems: Boolean
  excludedProductCategories(first: Int, last: Int, after: String, before: String, where: CouponToExcludedProductCategoriesConnectionWhereArgs): CouponToExcludedProductCategoriesConnection
  excludedProducts(first: Int, last: Int, after: String, before: String, where: CouponToExcludedProductsConnectionWhereArgs): CouponToExcludedProductsConnection
  freeShipping: Boolean
  id: ID!
  individualUse: Boolean
  limitUsageToXItems: Int
  maximumAmount: Float
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  minimumAmount: Float
  modified: String
  productCategories(first: Int, last: Int, after: String, before: String, where: CouponToProductCategoryConnectionWhereArgs): CouponToProductCategoryConnection
  products(first: Int, last: Int, after: String, before: String, where: CouponToProductConnectionWhereArgs): CouponToProductConnection
  usageCount: Int
  usageLimit: Int
  usageLimitPerUser: Int
  usedBy(first: Int, last: Int, after: String, before: String, where: CouponToCustomerConnectionWhereArgs): CouponToCustomerConnection
}

enum CouponIdTypeEnum {
  CODE
  DATABASE_ID
  ID
}

type CouponLine {
  code: String
  coupon: Coupon
  databaseId: Int
  discount: String
  discountTax: String
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  orderId: Int
}

type CouponToCustomerConnection {
  edges: [CouponToCustomerConnectionEdge]
  nodes: [Customer]
  pageInfo: WPPageInfo
}

type CouponToCustomerConnectionEdge {
  cursor: String
  node: Customer
}

input CouponToCustomerConnectionWhereArgs {
  email: String
  exclude: [Int]
  include: [Int]
  order: OrderEnum
  orderby: CustomerConnectionOrderbyEnum
  search: String
}

type CouponToExcludedProductCategoriesConnection {
  edges: [CouponToExcludedProductCategoriesConnectionEdge]
  nodes: [ProductCategory]
  pageInfo: WPPageInfo
}

type CouponToExcludedProductCategoriesConnectionEdge {
  cursor: String
  node: ProductCategory
}

input CouponToExcludedProductCategoriesConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type CouponToExcludedProductsConnection {
  edges: [CouponToExcludedProductsConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type CouponToExcludedProductsConnectionEdge {
  cursor: String
  node: Product
}

input CouponToExcludedProductsConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type CouponToProductCategoryConnection {
  edges: [CouponToProductCategoryConnectionEdge]
  nodes: [ProductCategory]
  pageInfo: WPPageInfo
}

type CouponToProductCategoryConnectionEdge {
  cursor: String
  node: ProductCategory
}

input CouponToProductCategoryConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type CouponToProductConnection {
  edges: [CouponToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type CouponToProductConnectionEdge {
  cursor: String
  node: Product
}

input CouponToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

input CreateAccountInput {
  password: String!
  username: String!
}

input CreateCategoryInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  parentId: ID
  slug: String
}

type CreateCategoryPayload {
  category: Category
  clientMutationId: String
}

input CreateCommentInput {
  approved: String
  author: String
  authorEmail: String
  authorUrl: String
  clientMutationId: String
  commentOn: Int
  content: String
  date: String
  parent: ID
  type: String
}

type CreateCommentPayload {
  clientMutationId: String
  comment: Comment
  success: Boolean
}

input CreateCouponInput {
  amount: Float
  clientMutationId: String
  code: String!
  dateExpires: String
  dateExpiresGmt: String
  description: String
  discountType: DiscountTypeEnum
  emailRestrictions: [String]
  excludeSaleItems: Boolean
  excludedProductCategories: [Int]
  excludedProductIds: [Int]
  freeShipping: Boolean
  individualUse: Boolean
  limitUsageToXItems: Int
  maximumAmount: String
  metaData: [MetaDataInput]
  minimumAmount: String
  productCategories: [Int]
  productIds: [Int]
  usageLimit: Int
  usageLimitPerUser: Int
}

type CreateCouponPayload {
  clientMutationId: String
  code: String
  coupon: Coupon
}

input CreateMediaItemInput {
  altText: String
  authorId: ID
  caption: String
  clientMutationId: String
  commentStatus: String
  date: String
  dateGmt: String
  description: String
  filePath: String
  fileType: MimeTypeEnum
  parentId: ID
  pingStatus: String
  slug: String
  status: MediaItemStatusEnum
  title: String
}

type CreateMediaItemPayload {
  clientMutationId: String
  mediaItem: MediaItem
}

input CreateOrderInput {
  billing: CustomerAddressInput
  clientMutationId: String
  coupons: [String]
  currency: String
  customerId: Int
  customerNote: String
  feeLines: [FeeLineInput]
  isPaid: Boolean
  lineItems: [LineItemInput]
  metaData: [MetaDataInput]
  parentId: Int
  paymentMethod: String
  paymentMethodTitle: String
  shipping: CustomerAddressInput
  shippingLines: [ShippingLineInput]
  status: OrderStatusEnum
  transactionId: String
}

type CreateOrderPayload {
  clientMutationId: String
  order: Order
  orderId: Int
}

input CreatePaColorInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreatePaColorPayload {
  clientMutationId: String
  paColor: PaColor
}

input CreatePaSizeInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreatePaSizePayload {
  clientMutationId: String
  paSize: PaSize
}

input CreatePaWidthInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreatePaWidthPayload {
  clientMutationId: String
  paWidth: PaWidth
}

input CreatePageInput {
  authorId: ID
  clientMutationId: String
  commentStatus: String
  content: String
  date: String
  menuOrder: Int
  parentId: ID
  password: String
  slug: String
  status: PostStatusEnum
  title: String
}

type CreatePagePayload {
  clientMutationId: String
  page: Page
}

input CreatePostFormatInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreatePostFormatPayload {
  clientMutationId: String
  postFormat: PostFormat
}

input CreatePostInput {
  authorId: ID
  categories: PostCategoriesInput
  clientMutationId: String
  commentStatus: String
  content: String
  date: String
  excerpt: String
  menuOrder: Int
  password: String
  pingStatus: String
  pinged: [String]
  postFormats: PostPostFormatsInput
  slug: String
  status: PostStatusEnum
  tags: PostTagsInput
  title: String
  toPing: [String]
}

type CreatePostPayload {
  clientMutationId: String
  post: Post
}

input CreateProductCategoryInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  parentId: ID
  slug: String
}

type CreateProductCategoryPayload {
  clientMutationId: String
  productCategory: ProductCategory
}

input CreateProductTagInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreateProductTagPayload {
  clientMutationId: String
  productTag: ProductTag
}

input CreateProductTypeInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreateProductTypePayload {
  clientMutationId: String
  productType: ProductType
}

input CreateShippingClassInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreateShippingClassPayload {
  clientMutationId: String
  shippingClass: ShippingClass
}

input CreateTagInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreateTagPayload {
  clientMutationId: String
  tag: Tag
}

input CreateUserInput {
  aim: String
  clientMutationId: String
  description: String
  displayName: String
  email: String
  firstName: String
  jabber: String
  lastName: String
  locale: String
  nicename: String
  nickname: String
  password: String
  registered: String
  richEditing: String
  roles: [String]
  username: String!
  websiteUrl: String
  yim: String
}

type CreateUserPayload {
  clientMutationId: String
  user: User
}

input CreateVisibleProductInput {
  aliasOf: String
  clientMutationId: String
  description: String
  name: String!
  slug: String
}

type CreateVisibleProductPayload {
  clientMutationId: String
  visibleProduct: VisibleProduct
}

type Customer implements Node {
  billing: CustomerAddress
  calculatedShipping: Boolean
  databaseId: Int
  date: String
  displayName: String
  downloadableItems(first: Int, last: Int, after: String, before: String, where: CustomerToDownloadableItemConnectionWhereArgs): CustomerToDownloadableItemConnection
  email: String
  firstName: String
  hasCalculatedShipping: Boolean
  id: ID!
  isPayingCustomer: Boolean
  isVatExempt: Boolean
  lastName: String
  lastOrder: Order
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  orderCount: Int
  orders(first: Int, last: Int, after: String, before: String, where: CustomerToOrderConnectionWhereArgs): CustomerToOrderConnection
  refunds(first: Int, last: Int, after: String, before: String, where: CustomerToRefundConnectionWhereArgs): CustomerToRefundConnection
  role: String
  sessionToken: String
  shipping: CustomerAddress
  totalSpent: Float
  username: String
}

type CustomerAddress {
  address1: String
  address2: String
  city: String
  company: String
  country: CountriesEnum
  email: String
  firstName: String
  lastName: String
  phone: String
  postcode: String
  state: String
}

input CustomerAddressInput {
  address1: String
  address2: String
  city: String
  company: String
  country: CountriesEnum
  email: String
  firstName: String
  lastName: String
  overwrite: Boolean
  phone: String
  postcode: String
  state: String
}

enum CustomerConnectionOrderbyEnum {
  EMAIL
  ID
  INCLUDE
  NAME
  REGISTERED_DATE
  USERNAME
}

type CustomerToDownloadableItemConnection {
  edges: [CustomerToDownloadableItemConnectionEdge]
  nodes: [DownloadableItem]
  pageInfo: WPPageInfo
}

type CustomerToDownloadableItemConnectionEdge {
  cursor: String
  node: DownloadableItem
}

input CustomerToDownloadableItemConnectionWhereArgs {
  active: Boolean
  expired: Boolean
  hasDownloadsRemaining: Boolean
}

type CustomerToOrderConnection {
  edges: [CustomerToOrderConnectionEdge]
  nodes: [Order]
  pageInfo: WPPageInfo
}

type CustomerToOrderConnectionEdge {
  cursor: String
  node: Order
}

input CustomerToOrderConnectionWhereArgs {
  customerId: Int
  customersIn: [Int]
  dateQuery: DateQueryInput
  exclude: [Int]
  include: [Int]
  orderby: [OrdersOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  productId: Int
  search: String
  statuses: [OrderStatusEnum]
}

type CustomerToRefundConnection {
  edges: [CustomerToRefundConnectionEdge]
  nodes: [Refund]
  pageInfo: WPPageInfo
}

type CustomerToRefundConnectionEdge {
  cursor: String
  node: Refund
}

input CustomerToRefundConnectionWhereArgs {
  dateQuery: DateQueryInput
  exclude: [Int]
  include: [Int]
  orderIn: [Int]
  orderby: [PostTypeOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  statuses: [String]
}

interface DatabaseIdentifier {
  databaseId: Int!
}

input DateInput {
  day: Int
  month: Int
  year: Int
}

input DateQueryInput {
  after: DateInput
  before: DateInput
  column: PostObjectsConnectionDateColumnEnum
  compare: String
  day: Int
  hour: Int
  inclusive: Boolean
  minute: Int
  month: Int
  relation: RelationEnum
  second: Int
  week: Int
  year: Int
}

type DefaultTemplate implements ContentTemplate {
  templateName: String
}

input DeleteCategoryInput {
  clientMutationId: String
  id: ID!
}

type DeleteCategoryPayload {
  category: Category
  clientMutationId: String
  deletedId: ID
}

input DeleteCommentInput {
  clientMutationId: String
  forceDelete: Boolean
  id: ID!
}

type DeleteCommentPayload {
  clientMutationId: String
  comment: Comment
  deletedId: ID
}

input DeleteCouponInput {
  clientMutationId: String
  forceDelete: Boolean
  id: ID!
}

type DeleteCouponPayload {
  clientMutationId: String
  code: String
  coupon: Coupon
}

input DeleteMediaItemInput {
  clientMutationId: String
  forceDelete: Boolean
  id: ID!
}

type DeleteMediaItemPayload {
  clientMutationId: String
  deletedId: ID
  mediaItem: MediaItem
}

input DeleteOrderInput {
  clientMutationId: String
  forceDelete: Boolean
  id: ID
  orderId: Int
}

input DeleteOrderItemsInput {
  clientMutationId: String
  id: ID
  itemIds: [Int]
  orderId: Int
}

type DeleteOrderItemsPayload {
  clientMutationId: String
  order: Order
}

type DeleteOrderPayload {
  clientMutationId: String
  order: Order
}

input DeletePaColorInput {
  clientMutationId: String
  id: ID!
}

type DeletePaColorPayload {
  clientMutationId: String
  deletedId: ID
  paColor: PaColor
}

input DeletePaSizeInput {
  clientMutationId: String
  id: ID!
}

type DeletePaSizePayload {
  clientMutationId: String
  deletedId: ID
  paSize: PaSize
}

input DeletePaWidthInput {
  clientMutationId: String
  id: ID!
}

type DeletePaWidthPayload {
  clientMutationId: String
  deletedId: ID
  paWidth: PaWidth
}

input DeletePageInput {
  clientMutationId: String
  forceDelete: Boolean
  id: ID!
}

type DeletePagePayload {
  clientMutationId: String
  deletedId: ID
  page: Page
}

input DeletePostFormatInput {
  clientMutationId: String
  id: ID!
}

type DeletePostFormatPayload {
  clientMutationId: String
  deletedId: ID
  postFormat: PostFormat
}

input DeletePostInput {
  clientMutationId: String
  forceDelete: Boolean
  id: ID!
}

type DeletePostPayload {
  clientMutationId: String
  deletedId: ID
  post: Post
}

input DeleteProductCategoryInput {
  clientMutationId: String
  id: ID!
}

type DeleteProductCategoryPayload {
  clientMutationId: String
  deletedId: ID
  productCategory: ProductCategory
}

input DeleteProductTagInput {
  clientMutationId: String
  id: ID!
}

type DeleteProductTagPayload {
  clientMutationId: String
  deletedId: ID
  productTag: ProductTag
}

input DeleteProductTypeInput {
  clientMutationId: String
  id: ID!
}

type DeleteProductTypePayload {
  clientMutationId: String
  deletedId: ID
  productType: ProductType
}

input DeleteReviewInput {
  clientMutationId: String
  forceDelete: Boolean
  id: ID!
}

type DeleteReviewPayload {
  affectedId: ID
  clientMutationId: String
  rating: Float
  review: Comment
}

input DeleteShippingClassInput {
  clientMutationId: String
  id: ID!
}

type DeleteShippingClassPayload {
  clientMutationId: String
  deletedId: ID
  shippingClass: ShippingClass
}

input DeleteTagInput {
  clientMutationId: String
  id: ID!
}

type DeleteTagPayload {
  clientMutationId: String
  deletedId: ID
  tag: Tag
}

input DeleteUserInput {
  clientMutationId: String
  id: ID!
  reassignId: ID
}

type DeleteUserPayload {
  clientMutationId: String
  deletedId: ID
  user: User
}

input DeleteVisibleProductInput {
  clientMutationId: String
  id: ID!
}

type DeleteVisibleProductPayload {
  clientMutationId: String
  deletedId: ID
  visibleProduct: VisibleProduct
}

enum DiscountTypeEnum {
  FIXED_CART
  FIXED_PRODUCT
  PERCENT
}

type DiscussionSettings {
  defaultCommentStatus: String
  defaultPingStatus: String
}

type DownloadableItem {
  accessExpires: String
  download: ProductDownload
  downloadId: String!
  downloadsRemaining: Int
  name: String
  product: Product
  url: String
}

input EmptyCartInput {
  clearPersistentCart: Boolean
  clientMutationId: String
}

type EmptyCartPayload {
  cart: Cart
  clientMutationId: String
  deletedCart: Cart
}

interface EnqueuedAsset {
  args: Boolean
  dependencies: [EnqueuedScript]
  extra: String
  handle: String
  id: ID!
  src: String
  version: String
}

type EnqueuedScript implements Node & EnqueuedAsset {
  args: Boolean
  dependencies: [EnqueuedScript]
  extra: String
  handle: String
  id: ID!
  src: String
  version: String
}

type EnqueuedStylesheet implements Node & EnqueuedAsset {
  args: Boolean
  dependencies: [EnqueuedScript]
  extra: String
  handle: String
  id: ID!
  src: String
  version: String
}

type ExternalProduct implements Node & Product & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier {
  attributes(first: Int, last: Int, after: String, before: String, where: ProductToProductAttributeConnectionWhereArgs): ProductToProductAttributeConnection
  averageRating: Float
  buttonText: String
  catalogVisibility: CatalogVisibilityEnum
  commentCount: Int
  commentStatus: String
  content(format: PostObjectFieldFormatEnum): String
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  dateOnSaleFrom: String
  dateOnSaleTo: String
  defaultAttributes(first: Int, last: Int, after: String, before: String): ExternalProductToVariationAttributeConnection
  description(format: PostObjectFieldFormatEnum): String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  externalUrl: String
  featured: Boolean
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  galleryImages(first: Int, last: Int, after: String, before: String, where: ProductToMediaItemConnectionWhereArgs): ProductToMediaItemConnection
  globalAttributes(first: Int, last: Int, after: String, before: String, where: ProductToGlobalProductAttributeConnectionWhereArgs): ProductToGlobalProductAttributeConnection
  guid: String
  id: ID!
  image: MediaItem
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  link: String
  localAttributes(first: Int, last: Int, after: String, before: String, where: ProductToLocalProductAttributeConnectionWhereArgs): ProductToLocalProductAttributeConnection
  menuOrder: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  modifiedGmt: String
  name: String
  onSale: Boolean
  paColors(first: Int, last: Int, after: String, before: String, where: ProductToPaColorConnectionWhereArgs): ProductToPaColorConnection
  paSizes(first: Int, last: Int, after: String, before: String, where: ProductToPaSizeConnectionWhereArgs): ProductToPaSizeConnection
  paWidths(first: Int, last: Int, after: String, before: String, where: ProductToPaWidthConnectionWhereArgs): ProductToPaWidthConnection
  parent: Product
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  price(format: PricingFieldFormatEnum): String
  productCategories(first: Int, last: Int, after: String, before: String, where: ProductToProductCategoryConnectionWhereArgs): ProductToProductCategoryConnection
  productTags(first: Int, last: Int, after: String, before: String, where: ProductToProductTagConnectionWhereArgs): ProductToProductTagConnection
  productTypes(first: Int, last: Int, after: String, before: String, where: ProductToProductTypeConnectionWhereArgs): ProductToProductTypeConnection
  purchasable: Boolean
  purchaseNote: String
  regularPrice(format: PricingFieldFormatEnum): String
  related(first: Int, last: Int, after: String, before: String, where: ProductToProductConnectionWhereArgs): ProductToProductConnection
  reviewCount: Int
  reviews(first: Int, last: Int, after: String, before: String, where: ProductToCommentConnectionWhereArgs): ProductToCommentConnection
  reviewsAllowed: Boolean
  salePrice(format: PricingFieldFormatEnum): String
  seo: PostTypeSEO
  shippingClasses(first: Int, last: Int, after: String, before: String, where: ProductToShippingClassConnectionWhereArgs): ProductToShippingClassConnection
  shortDescription(format: PostObjectFieldFormatEnum): String
  sku: String
  slug: String
  status: String
  taxClass: TaxClassEnum
  taxStatus: TaxStatusEnum
  template: ContentTemplate
  totalSales: Int
  type: ProductTypesEnum
  upsell(first: Int, last: Int, after: String, before: String, where: ProductToUpsellConnectionWhereArgs): ProductToUpsellConnection
  uri: String
  visibleProducts(first: Int, last: Int, after: String, before: String, where: ProductToVisibleProductConnectionWhereArgs): ProductToVisibleProductConnection
}

type ExternalProductToVariationAttributeConnection {
  edges: [ExternalProductToVariationAttributeConnectionEdge]
  nodes: [VariationAttribute]
  pageInfo: WPPageInfo
}

type ExternalProductToVariationAttributeConnectionEdge {
  cursor: String
  node: VariationAttribute
}

type FeeLine {
  amount: String
  databaseId: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  name: String
  orderId: Int
  taxClass: TaxClassEnum
  taxStatus: TaxStatusEnum
  taxes: [OrderItemTax]
  total: String
  totalTax: String
}

input FeeLineInput {
  amount: String
  id: ID
  name: String
  taxClass: TaxClassEnum
  taxStatus: TaxStatusEnum
  total: String
}

input FillCartInput {
  clientMutationId: String
  coupons: [String]
  items: [CartItemInput]
  shippingMethods: [String]
}

type FillCartPayload {
  added: [CartItem]
  applied: [AppliedCoupon]
  cart: Cart
  cartErrors: [CartError]
  chosenShippingMethods: [String]
  clientMutationId: String
}

type GeneralSettings {
  dateFormat: String
  description: String
  email: String
  language: String
  startOfWeek: Int
  timeFormat: String
  timezone: String
  title: String
  url: String
}

type GlobalProductAttribute implements ProductAttribute {
  attributeId: Int!
  id: ID!
  label: String!
  name: String!
  options: [String]
  position: Int!
  scope: ProductAttributeTypesEnum!
  slug: String!
  terms(first: Int, last: Int, after: String, before: String, where: GlobalProductAttributeToTermNodeConnectionWhereArgs): GlobalProductAttributeToTermNodeConnection
  variation: Boolean!
  visible: Boolean!
}

type GlobalProductAttributeToTermNodeConnection {
  edges: [GlobalProductAttributeToTermNodeConnectionEdge]
  nodes: [TermNode]
  pageInfo: WPPageInfo
}

type GlobalProductAttributeToTermNodeConnectionEdge {
  cursor: String
  node: TermNode
}

input GlobalProductAttributeToTermNodeConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type GroupProduct implements Node & Product & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier {
  addToCartDescription: String
  addToCartText: String
  attributes(first: Int, last: Int, after: String, before: String, where: ProductToProductAttributeConnectionWhereArgs): ProductToProductAttributeConnection
  averageRating: Float
  catalogVisibility: CatalogVisibilityEnum
  commentCount: Int
  commentStatus: String
  content(format: PostObjectFieldFormatEnum): String
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  dateOnSaleFrom: String
  dateOnSaleTo: String
  defaultAttributes(first: Int, last: Int, after: String, before: String): GroupProductToVariationAttributeConnection
  description(format: PostObjectFieldFormatEnum): String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  featured: Boolean
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  galleryImages(first: Int, last: Int, after: String, before: String, where: ProductToMediaItemConnectionWhereArgs): ProductToMediaItemConnection
  globalAttributes(first: Int, last: Int, after: String, before: String, where: ProductToGlobalProductAttributeConnectionWhereArgs): ProductToGlobalProductAttributeConnection
  guid: String
  id: ID!
  image: MediaItem
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  link: String
  localAttributes(first: Int, last: Int, after: String, before: String, where: ProductToLocalProductAttributeConnectionWhereArgs): ProductToLocalProductAttributeConnection
  menuOrder: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  modifiedGmt: String
  name: String
  onSale: Boolean
  paColors(first: Int, last: Int, after: String, before: String, where: ProductToPaColorConnectionWhereArgs): ProductToPaColorConnection
  paSizes(first: Int, last: Int, after: String, before: String, where: ProductToPaSizeConnectionWhereArgs): ProductToPaSizeConnection
  paWidths(first: Int, last: Int, after: String, before: String, where: ProductToPaWidthConnectionWhereArgs): ProductToPaWidthConnection
  parent: Product
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  price: String
  productCategories(first: Int, last: Int, after: String, before: String, where: ProductToProductCategoryConnectionWhereArgs): ProductToProductCategoryConnection
  productTags(first: Int, last: Int, after: String, before: String, where: ProductToProductTagConnectionWhereArgs): ProductToProductTagConnection
  productTypes(first: Int, last: Int, after: String, before: String, where: ProductToProductTypeConnectionWhereArgs): ProductToProductTypeConnection
  products(first: Int, last: Int, after: String, before: String, where: GroupProductToProductConnectionWhereArgs): GroupProductToProductConnection
  purchasable: Boolean
  purchaseNote: String
  related(first: Int, last: Int, after: String, before: String, where: ProductToProductConnectionWhereArgs): ProductToProductConnection
  reviewCount: Int
  reviews(first: Int, last: Int, after: String, before: String, where: ProductToCommentConnectionWhereArgs): ProductToCommentConnection
  reviewsAllowed: Boolean
  seo: PostTypeSEO
  shippingClasses(first: Int, last: Int, after: String, before: String, where: ProductToShippingClassConnectionWhereArgs): ProductToShippingClassConnection
  shortDescription(format: PostObjectFieldFormatEnum): String
  sku: String
  slug: String
  status: String
  template: ContentTemplate
  totalSales: Int
  type: ProductTypesEnum
  upsell(first: Int, last: Int, after: String, before: String, where: ProductToUpsellConnectionWhereArgs): ProductToUpsellConnection
  uri: String
  visibleProducts(first: Int, last: Int, after: String, before: String, where: ProductToVisibleProductConnectionWhereArgs): ProductToVisibleProductConnection
}

type GroupProductToProductConnection {
  edges: [GroupProductToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type GroupProductToProductConnectionEdge {
  cursor: String
  node: Product
}

input GroupProductToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type GroupProductToVariationAttributeConnection {
  edges: [GroupProductToVariationAttributeConnectionEdge]
  nodes: [VariationAttribute]
  pageInfo: WPPageInfo
}

type GroupProductToVariationAttributeConnectionEdge {
  cursor: String
  node: VariationAttribute
}

interface HierarchicalContentNode {
  ancestors(first: Int, last: Int, after: String, before: String, where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs): HierarchicalContentNodeToContentNodeAncestorsConnection
  children(first: Int, last: Int, after: String, before: String, where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs): HierarchicalContentNodeToContentNodeChildrenConnection
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  parentDatabaseId: Int
  parentId: ID
}

type HierarchicalContentNodeToContentNodeAncestorsConnection {
  edges: [HierarchicalContentNodeToContentNodeAncestorsConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge {
  cursor: String
  node: ContentNode
}

input HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
  contentTypes: [ContentTypeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type HierarchicalContentNodeToContentNodeChildrenConnection {
  edges: [HierarchicalContentNodeToContentNodeChildrenConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type HierarchicalContentNodeToContentNodeChildrenConnectionEdge {
  cursor: String
  node: ContentNode
}

input HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
  contentTypes: [ContentTypeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type HierarchicalContentNodeToParentContentNodeConnectionEdge {
  node: ContentNode
}

interface HierarchicalTermNode {
  parentDatabaseId: Int
  parentId: ID
}

type LineItem {
  databaseId: Int
  itemDownloads: [ProductDownload]
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  orderId: Int
  product: Product
  productId: Int
  quantity: Int
  subtotal: String
  subtotalTax: String
  taxClass: TaxClassEnum
  taxStatus: TaxStatusEnum
  taxes: [OrderItemTax]
  total: String
  totalTax: String
  variation: ProductVariation
  variationId: Int
}

input LineItemInput {
  id: ID
  metaData: [MetaDataInput]
  name: String
  productId: Int
  quantity: Int
  sku: String
  subtotal: String
  taxClass: TaxClassEnum
  total: String
  variationId: Int
}

type LocalProductAttribute implements ProductAttribute {
  attributeId: Int!
  id: ID!
  label: String!
  name: String!
  options: [String]
  position: Int!
  scope: ProductAttributeTypesEnum!
  variation: Boolean!
  visible: Boolean!
}

enum ManageStockEnum {
  FALSE
  PARENT
  TRUE
}

type MediaDetails {
  file: String
  height: Int
  meta: MediaItemMeta
  sizes: [MediaSize]
  width: Int
}

type MediaItem implements Node & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier & NodeWithTemplate & NodeWithTitle & NodeWithAuthor & NodeWithComments & HierarchicalContentNode {
  altText: String
  ancestors(first: Int, last: Int, after: String, before: String, where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs): HierarchicalContentNodeToContentNodeAncestorsConnection
  author: NodeWithAuthorToUserConnectionEdge
  authorDatabaseId: Int
  authorId: ID
  caption(format: PostObjectFieldFormatEnum): String
  children(first: Int, last: Int, after: String, before: String, where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs): HierarchicalContentNodeToContentNodeChildrenConnection
  commentCount: Int
  commentStatus: String
  comments(first: Int, last: Int, after: String, before: String, where: MediaItemToCommentConnectionWhereArgs): MediaItemToCommentConnection
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  description(format: PostObjectFieldFormatEnum): String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  fileSize(size: MediaItemSizeEnum): Int
  guid: String
  id: ID!
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  link: String
  mediaDetails: MediaDetails
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  mediaItemUrl: String
  mediaType: String
  mimeType: String
  modified: String
  modifiedGmt: String
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  parentDatabaseId: Int
  parentId: ID
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  seo: PostTypeSEO
  sizes(size: MediaItemSizeEnum): String
  slug: String
  sourceUrl(size: MediaItemSizeEnum): String
  srcSet(size: MediaItemSizeEnum): String
  status: String
  template: ContentTemplate
  title(format: PostObjectFieldFormatEnum): String
  uri: String
}

enum MediaItemIdType {
  DATABASE_ID
  ID
  SLUG
  SOURCE_URL
  URI
}

type MediaItemMeta {
  aperture: Float
  camera: String
  caption: String
  copyright: String
  createdTimestamp: Int
  credit: String
  focalLength: Float
  iso: Int
  keywords: [String]
  orientation: String
  shutterSpeed: Float
  title: String
}

enum MediaItemSizeEnum {
  LARGE
  MEDIUM
  MEDIUM_LARGE
  SHOP_CATALOG
  SHOP_SINGLE
  SHOP_THUMBNAIL
  THUMBNAIL
  WOOCOMMERCE_GALLERY_THUMBNAIL
  WOOCOMMERCE_SINGLE
  WOOCOMMERCE_THUMBNAIL
  _1536X1536
  _2048X2048
}

enum MediaItemStatusEnum {
  AUTO_DRAFT
  INHERIT
  PRIVATE
  TRASH
}

type MediaItemToCommentConnection {
  edges: [MediaItemToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type MediaItemToCommentConnectionEdge {
  cursor: String
  node: Comment
}

input MediaItemToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type MediaSize {
  file: String
  fileSize: Int
  height: String
  mimeType: String
  name: String
  sourceUrl: String
  width: String
}

type Menu implements Node & DatabaseIdentifier {
  count: Int
  databaseId: Int!
  id: ID!
  isRestricted: Boolean
  locations: [MenuLocationEnum]
  menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  menuItems(first: Int, last: Int, after: String, before: String, where: MenuToMenuItemConnectionWhereArgs): MenuToMenuItemConnection
  name: String
  slug: String
}

type MenuItem implements Node & DatabaseIdentifier {
  childItems(first: Int, last: Int, after: String, before: String, where: MenuItemToMenuItemConnectionWhereArgs): MenuItemToMenuItemConnection
  connectedNode: MenuItemToMenuItemLinkableConnectionEdge
  connectedObject: MenuItemObjectUnion @deprecated(reason: "Deprecated in favor of the connectedNode field")
  cssClasses: [String]
  databaseId: Int!
  description: String
  id: ID!
  isRestricted: Boolean
  label: String
  linkRelationship: String
  locations: [MenuLocationEnum]
  menu: MenuItemToMenuConnectionEdge
  menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  order: Int
  parentDatabaseId: Int
  parentId: ID
  path: String
  target: String
  title: String
  url: String
}

interface MenuItemLinkable {
  databaseId: Int!
  id: ID!
  uri: String
}

enum MenuItemNodeIdTypeEnum {
  DATABASE_ID
  ID
}

union MenuItemObjectUnion = Post | Page | Category | Tag | ProductCategory | ProductTag

type MenuItemToMenuConnectionEdge {
  node: Menu
}

type MenuItemToMenuItemConnection {
  edges: [MenuItemToMenuItemConnectionEdge]
  nodes: [MenuItem]
  pageInfo: WPPageInfo
}

type MenuItemToMenuItemConnectionEdge {
  cursor: String
  node: MenuItem
}

input MenuItemToMenuItemConnectionWhereArgs {
  id: Int
  location: MenuLocationEnum
  parentDatabaseId: Int
  parentId: ID
}

type MenuItemToMenuItemLinkableConnectionEdge {
  node: MenuItemLinkable
}

enum MenuLocationEnum {
  HANDHELD
  PRIMARY
  SECONDARY
}

enum MenuNodeIdTypeEnum {
  DATABASE_ID
  ID
  NAME
}

type MenuToMenuItemConnection {
  edges: [MenuToMenuItemConnectionEdge]
  nodes: [MenuItem]
  pageInfo: WPPageInfo
}

type MenuToMenuItemConnectionEdge {
  cursor: String
  node: MenuItem
}

input MenuToMenuItemConnectionWhereArgs {
  id: Int
  location: MenuLocationEnum
  parentDatabaseId: Int
  parentId: ID
}

type MetaData {
  id: ID
  key: String!
  value: String
}

input MetaDataInput {
  key: String!
  value: String!
}

enum MimeTypeEnum {
  APPLICATION_JAVA
  APPLICATION_MSWORD
  APPLICATION_OCTET_STREAM
  APPLICATION_ONENOTE
  APPLICATION_OXPS
  APPLICATION_PDF
  APPLICATION_RAR
  APPLICATION_RTF
  APPLICATION_TTAF_XML
  APPLICATION_VND_APPLE_KEYNOTE
  APPLICATION_VND_APPLE_NUMBERS
  APPLICATION_VND_APPLE_PAGES
  APPLICATION_VND_MS_ACCESS
  APPLICATION_VND_MS_EXCEL
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_PROJECT
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_WRITE
  APPLICATION_VND_MS_XPSDOCUMENT
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
  APPLICATION_WORDPERFECT
  APPLICATION_X_7Z_COMPRESSED
  APPLICATION_X_GZIP
  APPLICATION_X_TAR
  APPLICATION_ZIP
  AUDIO_AAC
  AUDIO_FLAC
  AUDIO_MIDI
  AUDIO_MPEG
  AUDIO_OGG
  AUDIO_WAV
  AUDIO_X_MATROSKA
  AUDIO_X_MS_WAX
  AUDIO_X_MS_WMA
  AUDIO_X_REALAUDIO
  IMAGE_BMP
  IMAGE_GIF
  IMAGE_HEIC
  IMAGE_JPEG
  IMAGE_PNG
  IMAGE_TIFF
  IMAGE_WEBP
  IMAGE_X_ICON
  TEXT_CALENDAR
  TEXT_CSS
  TEXT_CSV
  TEXT_PLAIN
  TEXT_RICHTEXT
  TEXT_TAB_SEPARATED_VALUES
  TEXT_VTT
  VIDEO_3GPP
  VIDEO_3GPP2
  VIDEO_AVI
  VIDEO_DIVX
  VIDEO_MP4
  VIDEO_MPEG
  VIDEO_OGG
  VIDEO_QUICKTIME
  VIDEO_WEBM
  VIDEO_X_FLV
  VIDEO_X_MATROSKA
  VIDEO_X_MS_ASF
  VIDEO_X_MS_WM
  VIDEO_X_MS_WMV
  VIDEO_X_MS_WMX
}

interface Node {
  id: ID!
}

interface NodeWithAuthor {
  author: NodeWithAuthorToUserConnectionEdge
  authorDatabaseId: Int
  authorId: ID
}

type NodeWithAuthorToUserConnectionEdge {
  node: User
}

interface NodeWithComments {
  commentCount: Int
  commentStatus: String
}

interface NodeWithContentEditor {
  content(format: PostObjectFieldFormatEnum): String
}

interface NodeWithExcerpt {
  excerpt(format: PostObjectFieldFormatEnum): String
}

interface NodeWithFeaturedImage implements Node & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  guid: String
  id: ID!
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  link: String
  modified: String
  modifiedGmt: String
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  slug: String
  status: String
  template: ContentTemplate
  uri: String
}

type NodeWithFeaturedImageToMediaItemConnectionEdge {
  node: MediaItem
}

interface NodeWithPageAttributes {
  menuOrder: Int
}

interface NodeWithRevisions {
  isRevision: Boolean
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

type NodeWithRevisionsToContentNodeConnectionEdge {
  node: ContentNode
}

interface NodeWithTemplate {
  template: ContentTemplate
}

interface NodeWithTitle {
  title(format: PostObjectFieldFormatEnum): String
}

interface NodeWithTrackbacks {
  pingStatus: String
  pinged: [String]
  toPing: [String]
}

type Order implements Node & NodeWithComments {
  billing: CustomerAddress
  cartHash: String
  cartTax(format: PricingFieldFormatEnum): String
  commentCount: Int
  commentStatus: String
  couponLines(first: Int, last: Int, after: String, before: String): OrderToCouponLineConnection
  createdVia: String
  currency: String
  customer: Customer
  customerIpAddress: String
  customerNote: String
  customerUserAgent: String
  databaseId: Int
  date: String
  dateCompleted: String
  datePaid: String
  discountTax(format: PricingFieldFormatEnum): String
  discountTotal(format: PricingFieldFormatEnum): String
  downloadableItems(first: Int, last: Int, after: String, before: String, where: OrderToDownloadableItemConnectionWhereArgs): OrderToDownloadableItemConnection
  feeLines(first: Int, last: Int, after: String, before: String): OrderToFeeLineConnection
  hasBillingAddress: Boolean
  hasDownloadableItem: Boolean
  hasShippingAddress: Boolean
  id: ID!
  isDownloadPermitted: Boolean
  lineItems(first: Int, last: Int, after: String, before: String): OrderToLineItemConnection
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  needsPayment: Boolean
  needsProcessing: Boolean
  needsShippingAddress: Boolean
  orderKey: String
  orderNotes(first: Int, last: Int, after: String, before: String, where: OrderToCommentConnectionWhereArgs): OrderToCommentConnection
  orderNumber: String
  orderVersion: String
  parent: Order
  paymentMethod: String
  paymentMethodTitle: String
  pricesIncludeTax: Boolean
  refunds(first: Int, last: Int, after: String, before: String, where: OrderToRefundConnectionWhereArgs): OrderToRefundConnection
  shipping: CustomerAddress
  shippingAddressMapUrl: String
  shippingLines(first: Int, last: Int, after: String, before: String): OrderToShippingLineConnection
  shippingTax(format: PricingFieldFormatEnum): String
  shippingTotal(format: PricingFieldFormatEnum): String
  status: OrderStatusEnum
  subtotal(format: PricingFieldFormatEnum): String
  taxLines(first: Int, last: Int, after: String, before: String): OrderToTaxLineConnection
  total(format: PricingFieldFormatEnum): String
  totalTax(format: PricingFieldFormatEnum): String
  transactionId: String
}

enum OrderEnum {
  ASC
  DESC
}

enum OrderIdTypeEnum {
  DATABASE_ID
  ID
  ORDER_NUMBER
}

type OrderItemTax {
  amount: Float
  subtotal: Float
  taxLine: TaxLine
  taxLineId: Int!
  total: Float
}

enum OrderStatusEnum {
  CANCELLED
  COMPLETED
  FAILED
  ON_HOLD
  PENDING
  PROCESSING
  REFUNDED
}

type OrderToCommentConnection {
  edges: [OrderToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type OrderToCommentConnectionEdge {
  cursor: String
  isCustomerNote: Boolean
  node: Comment
}

input OrderToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type OrderToCouponLineConnection {
  edges: [OrderToCouponLineConnectionEdge]
  nodes: [CouponLine]
  pageInfo: WPPageInfo
}

type OrderToCouponLineConnectionEdge {
  cursor: String
  node: CouponLine
}

type OrderToDownloadableItemConnection {
  edges: [OrderToDownloadableItemConnectionEdge]
  nodes: [DownloadableItem]
  pageInfo: WPPageInfo
}

type OrderToDownloadableItemConnectionEdge {
  cursor: String
  node: DownloadableItem
}

input OrderToDownloadableItemConnectionWhereArgs {
  active: Boolean
  expired: Boolean
  hasDownloadsRemaining: Boolean
}

type OrderToFeeLineConnection {
  edges: [OrderToFeeLineConnectionEdge]
  nodes: [FeeLine]
  pageInfo: WPPageInfo
}

type OrderToFeeLineConnectionEdge {
  cursor: String
  node: FeeLine
}

type OrderToLineItemConnection {
  edges: [OrderToLineItemConnectionEdge]
  nodes: [LineItem]
  pageInfo: WPPageInfo
}

type OrderToLineItemConnectionEdge {
  cursor: String
  node: LineItem
}

type OrderToRefundConnection {
  edges: [OrderToRefundConnectionEdge]
  nodes: [Refund]
  pageInfo: WPPageInfo
}

type OrderToRefundConnectionEdge {
  cursor: String
  node: Refund
}

input OrderToRefundConnectionWhereArgs {
  dateQuery: DateQueryInput
  exclude: [Int]
  include: [Int]
  orderIn: [Int]
  orderby: [PostTypeOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  statuses: [String]
}

type OrderToShippingLineConnection {
  edges: [OrderToShippingLineConnectionEdge]
  nodes: [ShippingLine]
  pageInfo: WPPageInfo
}

type OrderToShippingLineConnectionEdge {
  cursor: String
  node: ShippingLine
}

type OrderToTaxLineConnection {
  edges: [OrderToTaxLineConnectionEdge]
  nodes: [TaxLine]
  pageInfo: WPPageInfo
}

type OrderToTaxLineConnectionEdge {
  cursor: String
  node: TaxLine
}

enum OrdersOrderByEnum {
  DATE
  DATE_COMPLETED
  DATE_PAID
  DISCOUNT
  IN
  MENU_ORDER
  MODIFIED
  NAME_IN
  ORDER_KEY
  PARENT
  SLUG
  TAX
  TOTAL
}

input OrdersOrderbyInput {
  field: OrdersOrderByEnum!
  order: OrderEnum
}

type PaColor implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentNodes(first: Int, last: Int, after: String, before: String, where: PaColorToContentNodeConnectionWhereArgs): PaColorToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  paColorId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  products(first: Int, last: Int, after: String, before: String, where: PaColorToProductConnectionWhereArgs): PaColorToProductConnection
  seo: TaxonomySEO
  slug: String
  taxonomy: PaColorToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
  variations(first: Int, last: Int, after: String, before: String, where: PaColorToProductVariationConnectionWhereArgs): PaColorToProductVariationConnection
}

enum PaColorIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type PaColorToContentNodeConnection {
  edges: [PaColorToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type PaColorToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input PaColorToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfPaColorEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type PaColorToProductConnection {
  edges: [PaColorToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type PaColorToProductConnectionEdge {
  cursor: String
  node: Product
}

input PaColorToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type PaColorToProductVariationConnection {
  edges: [PaColorToProductVariationConnectionEdge]
  nodes: [ProductVariation]
  pageInfo: WPPageInfo
}

type PaColorToProductVariationConnectionEdge {
  cursor: String
  node: ProductVariation
}

input PaColorToProductVariationConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type PaColorToTaxonomyConnectionEdge {
  node: Taxonomy
}

type PaSize implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentNodes(first: Int, last: Int, after: String, before: String, where: PaSizeToContentNodeConnectionWhereArgs): PaSizeToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  paSizeId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  products(first: Int, last: Int, after: String, before: String, where: PaSizeToProductConnectionWhereArgs): PaSizeToProductConnection
  seo: TaxonomySEO
  slug: String
  taxonomy: PaSizeToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
  variations(first: Int, last: Int, after: String, before: String, where: PaSizeToProductVariationConnectionWhereArgs): PaSizeToProductVariationConnection
}

enum PaSizeIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type PaSizeToContentNodeConnection {
  edges: [PaSizeToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type PaSizeToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input PaSizeToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfPaSizeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type PaSizeToProductConnection {
  edges: [PaSizeToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type PaSizeToProductConnectionEdge {
  cursor: String
  node: Product
}

input PaSizeToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type PaSizeToProductVariationConnection {
  edges: [PaSizeToProductVariationConnectionEdge]
  nodes: [ProductVariation]
  pageInfo: WPPageInfo
}

type PaSizeToProductVariationConnectionEdge {
  cursor: String
  node: ProductVariation
}

input PaSizeToProductVariationConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type PaSizeToTaxonomyConnectionEdge {
  node: Taxonomy
}

type PaWidth implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentNodes(first: Int, last: Int, after: String, before: String, where: PaWidthToContentNodeConnectionWhereArgs): PaWidthToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  paWidthId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  products(first: Int, last: Int, after: String, before: String, where: PaWidthToProductConnectionWhereArgs): PaWidthToProductConnection
  seo: TaxonomySEO
  slug: String
  taxonomy: PaWidthToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
  variations(first: Int, last: Int, after: String, before: String, where: PaWidthToProductVariationConnectionWhereArgs): PaWidthToProductVariationConnection
}

enum PaWidthIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type PaWidthToContentNodeConnection {
  edges: [PaWidthToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type PaWidthToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input PaWidthToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfPaWidthEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type PaWidthToProductConnection {
  edges: [PaWidthToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type PaWidthToProductConnectionEdge {
  cursor: String
  node: Product
}

input PaWidthToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type PaWidthToProductVariationConnection {
  edges: [PaWidthToProductVariationConnectionEdge]
  nodes: [ProductVariation]
  pageInfo: WPPageInfo
}

type PaWidthToProductVariationConnectionEdge {
  cursor: String
  node: ProductVariation
}

input PaWidthToProductVariationConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type PaWidthToTaxonomyConnectionEdge {
  node: Taxonomy
}

type Page implements Node & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier & NodeWithTemplate & NodeWithTitle & NodeWithContentEditor & NodeWithAuthor & NodeWithFeaturedImage & NodeWithComments & NodeWithRevisions & NodeWithPageAttributes & HierarchicalContentNode & MenuItemLinkable {
  ancestors(first: Int, last: Int, after: String, before: String, where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs): HierarchicalContentNodeToContentNodeAncestorsConnection
  author: NodeWithAuthorToUserConnectionEdge
  authorDatabaseId: Int
  authorId: ID
  children(first: Int, last: Int, after: String, before: String, where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs): HierarchicalContentNodeToContentNodeChildrenConnection
  commentCount: Int
  commentStatus: String
  comments(first: Int, last: Int, after: String, before: String, where: PageToCommentConnectionWhereArgs): PageToCommentConnection
  content(format: PostObjectFieldFormatEnum): String
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  guid: String
  id: ID!
  isContentNode: Boolean!
  isFrontPage: Boolean!
  isPostsPage: Boolean!
  isPreview: Boolean
  isPrivacyPage: Boolean!
  isRestricted: Boolean
  isRevision: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  link: String
  menuOrder: Int
  modified: String
  modifiedGmt: String
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  parentDatabaseId: Int
  parentId: ID
  preview: PageToPreviewConnectionEdge
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  revisions(first: Int, last: Int, after: String, before: String, where: PageToRevisionConnectionWhereArgs): PageToRevisionConnection
  seo: PostTypeSEO
  slug: String
  status: String
  template: ContentTemplate
  title(format: PostObjectFieldFormatEnum): String
  uri: String
}

enum PageIdType {
  DATABASE_ID
  ID
  URI
}

type PageToCommentConnection {
  edges: [PageToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type PageToCommentConnectionEdge {
  cursor: String
  node: Comment
}

input PageToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type PageToPreviewConnectionEdge {
  node: Page
}

type PageToRevisionConnection {
  edges: [PageToRevisionConnectionEdge]
  nodes: [Page]
  pageInfo: WPPageInfo
}

type PageToRevisionConnectionEdge {
  cursor: String
  node: Page
}

input PageToRevisionConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type PaymentGateway {
  description: String
  icon: String
  id: String!
  title: String
}

type Plugin implements Node {
  author: String
  authorUri: String
  description: String
  id: ID!
  isRestricted: Boolean
  name: String
  path: String
  pluginUri: String
  version: String
}

type Post implements Node & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier & NodeWithTemplate & NodeWithTitle & NodeWithContentEditor & NodeWithAuthor & NodeWithFeaturedImage & NodeWithExcerpt & NodeWithComments & NodeWithTrackbacks & NodeWithRevisions & MenuItemLinkable {
  author: NodeWithAuthorToUserConnectionEdge
  authorDatabaseId: Int
  authorId: ID
  categories(first: Int, last: Int, after: String, before: String, where: PostToCategoryConnectionWhereArgs): PostToCategoryConnection
  commentCount: Int
  commentStatus: String
  comments(first: Int, last: Int, after: String, before: String, where: PostToCommentConnectionWhereArgs): PostToCommentConnection
  content(format: PostObjectFieldFormatEnum): String
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  excerpt(format: PostObjectFieldFormatEnum): String
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  guid: String
  id: ID!
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isRevision: Boolean
  isSticky: Boolean!
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  link: String
  modified: String
  modifiedGmt: String
  pingStatus: String
  pinged: [String]
  postFormats(first: Int, last: Int, after: String, before: String, where: PostToPostFormatConnectionWhereArgs): PostToPostFormatConnection
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  preview: PostToPreviewConnectionEdge
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  revisions(first: Int, last: Int, after: String, before: String, where: PostToRevisionConnectionWhereArgs): PostToRevisionConnection
  seo: PostTypeSEO
  slug: String
  status: String
  tags(first: Int, last: Int, after: String, before: String, where: PostToTagConnectionWhereArgs): PostToTagConnection
  template: ContentTemplate
  terms(first: Int, last: Int, after: String, before: String, where: PostToTermNodeConnectionWhereArgs): PostToTermNodeConnection
  title(format: PostObjectFieldFormatEnum): String
  toPing: [String]
  uri: String
}

input PostCategoriesInput {
  append: Boolean
  nodes: [PostCategoriesNodeInput]
}

input PostCategoriesNodeInput {
  description: String
  id: ID
  name: String
  slug: String
}

type PostFormat implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentNodes(first: Int, last: Int, after: String, before: String, where: PostFormatToContentNodeConnectionWhereArgs): PostFormatToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  posts(first: Int, last: Int, after: String, before: String, where: PostFormatToPostConnectionWhereArgs): PostFormatToPostConnection
  seo: TaxonomySEO
  slug: String
  taxonomy: PostFormatToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum PostFormatIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type PostFormatToContentNodeConnection {
  edges: [PostFormatToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type PostFormatToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input PostFormatToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfPostFormatEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type PostFormatToPostConnection {
  edges: [PostFormatToPostConnectionEdge]
  nodes: [Post]
  pageInfo: WPPageInfo
}

type PostFormatToPostConnectionEdge {
  cursor: String
  node: Post
}

input PostFormatToPostConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  categoryId: Int
  categoryIn: [ID]
  categoryName: String
  categoryNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  tag: String
  tagId: String
  tagIn: [ID]
  tagNotIn: [ID]
  tagSlugAnd: [String]
  tagSlugIn: [String]
  title: String
}

type PostFormatToTaxonomyConnectionEdge {
  node: Taxonomy
}

enum PostIdType {
  DATABASE_ID
  ID
  SLUG
  URI
}

enum PostObjectFieldFormatEnum {
  RAW
  RENDERED
}

enum PostObjectsConnectionDateColumnEnum {
  DATE
  MODIFIED
}

enum PostObjectsConnectionOrderbyEnum {
  AUTHOR
  COMMENT_COUNT
  DATE
  IN
  MENU_ORDER
  MODIFIED
  NAME_IN
  PARENT
  SLUG
  TITLE
}

input PostObjectsConnectionOrderbyInput {
  field: PostObjectsConnectionOrderbyEnum!
  order: OrderEnum!
}

input PostPostFormatsInput {
  append: Boolean
  nodes: [PostPostFormatsNodeInput]
}

input PostPostFormatsNodeInput {
  description: String
  id: ID
  name: String
  slug: String
}

enum PostStatusEnum {
  ACF_DISABLED
  AUTO_DRAFT
  DRAFT
  FAILED
  FUTURE
  INHERIT
  IN_PROGRESS
  PENDING
  PRIVATE
  PUBLISH
  REQUEST_COMPLETED
  REQUEST_CONFIRMED
  REQUEST_FAILED
  REQUEST_PENDING
  TRASH
  WC_CANCELLED
  WC_COMPLETED
  WC_FAILED
  WC_ON_HOLD
  WC_PENDING
  WC_PROCESSING
  WC_REFUNDED
}

input PostTagsInput {
  append: Boolean
  nodes: [PostTagsNodeInput]
}

input PostTagsNodeInput {
  description: String
  id: ID
  name: String
  slug: String
}

type PostToCategoryConnection {
  edges: [PostToCategoryConnectionEdge]
  nodes: [Category]
  pageInfo: WPPageInfo
}

type PostToCategoryConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: Category
}

input PostToCategoryConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type PostToCommentConnection {
  edges: [PostToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type PostToCommentConnectionEdge {
  cursor: String
  node: Comment
}

input PostToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type PostToPostFormatConnection {
  edges: [PostToPostFormatConnectionEdge]
  nodes: [PostFormat]
  pageInfo: WPPageInfo
}

type PostToPostFormatConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: PostFormat
}

input PostToPostFormatConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type PostToPreviewConnectionEdge {
  node: Post
}

type PostToRevisionConnection {
  edges: [PostToRevisionConnectionEdge]
  nodes: [Post]
  pageInfo: WPPageInfo
}

type PostToRevisionConnectionEdge {
  cursor: String
  node: Post
}

input PostToRevisionConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  categoryId: Int
  categoryIn: [ID]
  categoryName: String
  categoryNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  tag: String
  tagId: String
  tagIn: [ID]
  tagNotIn: [ID]
  tagSlugAnd: [String]
  tagSlugIn: [String]
  title: String
}

type PostToTagConnection {
  edges: [PostToTagConnectionEdge]
  nodes: [Tag]
  pageInfo: WPPageInfo
}

type PostToTagConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: Tag
}

input PostToTagConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type PostToTermNodeConnection {
  edges: [PostToTermNodeConnectionEdge]
  nodes: [TermNode]
  pageInfo: WPPageInfo
}

type PostToTermNodeConnectionEdge {
  cursor: String
  node: TermNode
}

input PostToTermNodeConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  taxonomies: [TaxonomyEnum]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type PostTypeLabelDetails {
  addNew: String
  addNewItem: String
  allItems: String
  archives: String
  attributes: String
  editItem: String
  featuredImage: String
  filterItemsList: String
  insertIntoItem: String
  itemsList: String
  itemsListNavigation: String
  menuName: String
  name: String
  newItem: String
  notFound: String
  notFoundInTrash: String
  parentItemColon: String
  removeFeaturedImage: String
  searchItems: String
  setFeaturedImage: String
  singularName: String
  uploadedToThisItem: String
  useFeaturedImage: String
  viewItem: String
  viewItems: String
}

enum PostTypeOrderByEnum {
  DATE
  IN
  MENU_ORDER
  MODIFIED
  NAME_IN
  PARENT
  SLUG
}

input PostTypeOrderbyInput {
  field: PostTypeOrderByEnum!
  order: OrderEnum
}

type PostTypeSEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  readingTime: Float
  schema: SEOPostTypeSchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

enum PricingFieldFormatEnum {
  FORMATTED
  RAW
}

interface Product {
  attributes(first: Int, last: Int, after: String, before: String, where: ProductToProductAttributeConnectionWhereArgs): ProductToProductAttributeConnection
  averageRating: Float
  catalogVisibility: CatalogVisibilityEnum
  databaseId: Int!
  date: String
  dateOnSaleFrom: String
  dateOnSaleTo: String
  description(format: PostObjectFieldFormatEnum): String
  featured: Boolean
  galleryImages(first: Int, last: Int, after: String, before: String, where: ProductToMediaItemConnectionWhereArgs): ProductToMediaItemConnection
  globalAttributes(first: Int, last: Int, after: String, before: String, where: ProductToGlobalProductAttributeConnectionWhereArgs): ProductToGlobalProductAttributeConnection
  id: ID!
  image: MediaItem
  link: String
  localAttributes(first: Int, last: Int, after: String, before: String, where: ProductToLocalProductAttributeConnectionWhereArgs): ProductToLocalProductAttributeConnection
  menuOrder: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  name: String
  onSale: Boolean
  paColors(first: Int, last: Int, after: String, before: String, where: ProductToPaColorConnectionWhereArgs): ProductToPaColorConnection
  paSizes(first: Int, last: Int, after: String, before: String, where: ProductToPaSizeConnectionWhereArgs): ProductToPaSizeConnection
  paWidths(first: Int, last: Int, after: String, before: String, where: ProductToPaWidthConnectionWhereArgs): ProductToPaWidthConnection
  parent: Product
  productCategories(first: Int, last: Int, after: String, before: String, where: ProductToProductCategoryConnectionWhereArgs): ProductToProductCategoryConnection
  productTags(first: Int, last: Int, after: String, before: String, where: ProductToProductTagConnectionWhereArgs): ProductToProductTagConnection
  productTypes(first: Int, last: Int, after: String, before: String, where: ProductToProductTypeConnectionWhereArgs): ProductToProductTypeConnection
  purchasable: Boolean
  purchaseNote: String
  related(first: Int, last: Int, after: String, before: String, where: ProductToProductConnectionWhereArgs): ProductToProductConnection
  reviewCount: Int
  reviews(first: Int, last: Int, after: String, before: String, where: ProductToCommentConnectionWhereArgs): ProductToCommentConnection
  reviewsAllowed: Boolean
  seo: PostTypeSEO
  shippingClasses(first: Int, last: Int, after: String, before: String, where: ProductToShippingClassConnectionWhereArgs): ProductToShippingClassConnection
  shortDescription(format: PostObjectFieldFormatEnum): String
  sku: String
  slug: String
  status: String
  totalSales: Int
  type: ProductTypesEnum
  upsell(first: Int, last: Int, after: String, before: String, where: ProductToUpsellConnectionWhereArgs): ProductToUpsellConnection
  visibleProducts(first: Int, last: Int, after: String, before: String, where: ProductToVisibleProductConnectionWhereArgs): ProductToVisibleProductConnection
}

interface ProductAttribute {
  attributeId: Int!
  id: ID!
  label: String!
  name: String!
  options: [String]
  position: Int!
  scope: ProductAttributeTypesEnum!
  variation: Boolean!
  visible: Boolean!
}

input ProductAttributeInput {
  attributeName: String!
  attributeValue: String
}

type ProductAttributeOutput {
  attributeName: String
  attributeValue: String
}

enum ProductAttributeTypesEnum {
  GLOBAL
  LOCAL
}

type ProductCategory implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier & HierarchicalTermNode & MenuItemLinkable {
  ancestors(first: Int, last: Int, after: String, before: String): ProductCategoryToAncestorsProductCategoryConnection
  children(first: Int, last: Int, after: String, before: String, where: ProductCategoryToProductCategoryConnectionWhereArgs): ProductCategoryToProductCategoryConnection
  contentNodes(first: Int, last: Int, after: String, before: String, where: ProductCategoryToContentNodeConnectionWhereArgs): ProductCategoryToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  display: ProductCategoryDisplay
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  image: MediaItem
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  menuOrder: Int
  name: String
  parent: ProductCategoryToParentProductCategoryConnectionEdge
  parentDatabaseId: Int
  parentId: ID
  productCategoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  products(first: Int, last: Int, after: String, before: String, where: ProductCategoryToProductConnectionWhereArgs): ProductCategoryToProductConnection
  seo: TaxonomySEO
  slug: String
  taxonomy: ProductCategoryToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum ProductCategoryDisplay {
  BOTH
  DEFAULT
  PRODUCTS
  SUBCATEGORIES
}

enum ProductCategoryIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type ProductCategoryToAncestorsProductCategoryConnection {
  edges: [ProductCategoryToAncestorsProductCategoryConnectionEdge]
  nodes: [ProductCategory]
  pageInfo: WPPageInfo
}

type ProductCategoryToAncestorsProductCategoryConnectionEdge {
  cursor: String
  node: ProductCategory
}

type ProductCategoryToContentNodeConnection {
  edges: [ProductCategoryToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type ProductCategoryToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input ProductCategoryToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfProductCategoryEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type ProductCategoryToParentProductCategoryConnectionEdge {
  node: ProductCategory
}

type ProductCategoryToProductCategoryConnection {
  edges: [ProductCategoryToProductCategoryConnectionEdge]
  nodes: [ProductCategory]
  pageInfo: WPPageInfo
}

type ProductCategoryToProductCategoryConnectionEdge {
  cursor: String
  node: ProductCategory
}

input ProductCategoryToProductCategoryConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductCategoryToProductConnection {
  edges: [ProductCategoryToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type ProductCategoryToProductConnectionEdge {
  cursor: String
  node: Product
}

input ProductCategoryToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type ProductCategoryToTaxonomyConnectionEdge {
  node: Taxonomy
}

type ProductDownload {
  allowedFileType: Boolean
  downloadId: String!
  file: String
  fileExists: Boolean
  fileExt: String
  filePathType: String
  fileType: String
  name: String
}

enum ProductIdTypeEnum {
  DATABASE_ID
  ID
  SKU
  SLUG
}

type ProductTag implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier & MenuItemLinkable {
  contentNodes(first: Int, last: Int, after: String, before: String, where: ProductTagToContentNodeConnectionWhereArgs): ProductTagToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  productTagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  products(first: Int, last: Int, after: String, before: String, where: ProductTagToProductConnectionWhereArgs): ProductTagToProductConnection
  seo: TaxonomySEO
  slug: String
  taxonomy: ProductTagToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum ProductTagIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type ProductTagToContentNodeConnection {
  edges: [ProductTagToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type ProductTagToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input ProductTagToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfProductTagEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type ProductTagToProductConnection {
  edges: [ProductTagToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type ProductTagToProductConnectionEdge {
  cursor: String
  node: Product
}

input ProductTagToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type ProductTagToTaxonomyConnectionEdge {
  node: Taxonomy
}

enum ProductTaxonomyEnum {
  PACOLOR
  PASIZE
  PAWIDTH
  PRODUCTCATEGORY
  PRODUCTTAG
  PRODUCTTYPE
  SHIPPINGCLASS
  VISIBLEPRODUCT
}

input ProductTaxonomyFilterInput {
  ids: [Int]
  operator: TaxonomyOperatorEnum
  taxonomy: ProductTaxonomyEnum!
  terms: [String]
}

input ProductTaxonomyInput {
  filters: [ProductTaxonomyFilterInput]
  relation: RelationEnum
}

type ProductToCommentConnection {
  averageRating: Float
  edges: [ProductToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type ProductToCommentConnectionEdge {
  cursor: String
  node: Comment
  rating: Float
}

input ProductToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type ProductToGlobalProductAttributeConnection {
  edges: [ProductToGlobalProductAttributeConnectionEdge]
  nodes: [GlobalProductAttribute]
  pageInfo: WPPageInfo
}

type ProductToGlobalProductAttributeConnectionEdge {
  cursor: String
  node: GlobalProductAttribute
}

input ProductToGlobalProductAttributeConnectionWhereArgs {
  type: ProductAttributeTypesEnum
}

type ProductToLocalProductAttributeConnection {
  edges: [ProductToLocalProductAttributeConnectionEdge]
  nodes: [LocalProductAttribute]
  pageInfo: WPPageInfo
}

type ProductToLocalProductAttributeConnectionEdge {
  cursor: String
  node: LocalProductAttribute
}

input ProductToLocalProductAttributeConnectionWhereArgs {
  type: ProductAttributeTypesEnum
}

type ProductToMediaItemConnection {
  edges: [ProductToMediaItemConnectionEdge]
  nodes: [MediaItem]
  pageInfo: WPPageInfo
}

type ProductToMediaItemConnectionEdge {
  cursor: String
  node: MediaItem
}

input ProductToMediaItemConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type ProductToPaColorConnection {
  edges: [ProductToPaColorConnectionEdge]
  nodes: [PaColor]
  pageInfo: WPPageInfo
}

type ProductToPaColorConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: PaColor
}

input ProductToPaColorConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductToPaSizeConnection {
  edges: [ProductToPaSizeConnectionEdge]
  nodes: [PaSize]
  pageInfo: WPPageInfo
}

type ProductToPaSizeConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: PaSize
}

input ProductToPaSizeConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductToPaWidthConnection {
  edges: [ProductToPaWidthConnectionEdge]
  nodes: [PaWidth]
  pageInfo: WPPageInfo
}

type ProductToPaWidthConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: PaWidth
}

input ProductToPaWidthConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductToProductAttributeConnection {
  edges: [ProductToProductAttributeConnectionEdge]
  nodes: [ProductAttribute]
  pageInfo: WPPageInfo
}

type ProductToProductAttributeConnectionEdge {
  cursor: String
  node: ProductAttribute
}

input ProductToProductAttributeConnectionWhereArgs {
  type: ProductAttributeTypesEnum
}

type ProductToProductCategoryConnection {
  edges: [ProductToProductCategoryConnectionEdge]
  nodes: [ProductCategory]
  pageInfo: WPPageInfo
}

type ProductToProductCategoryConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: ProductCategory
}

input ProductToProductCategoryConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductToProductConnection {
  edges: [ProductToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type ProductToProductConnectionEdge {
  cursor: String
  node: Product
}

input ProductToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  shuffle: Boolean
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type ProductToProductTagConnection {
  edges: [ProductToProductTagConnectionEdge]
  nodes: [ProductTag]
  pageInfo: WPPageInfo
}

type ProductToProductTagConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: ProductTag
}

input ProductToProductTagConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductToProductTypeConnection {
  edges: [ProductToProductTypeConnectionEdge]
  nodes: [ProductType]
  pageInfo: WPPageInfo
}

type ProductToProductTypeConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: ProductType
}

input ProductToProductTypeConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductToShippingClassConnection {
  edges: [ProductToShippingClassConnectionEdge]
  nodes: [ShippingClass]
  pageInfo: WPPageInfo
}

type ProductToShippingClassConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: ShippingClass
}

input ProductToShippingClassConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductToUpsellConnection {
  edges: [ProductToUpsellConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type ProductToUpsellConnectionEdge {
  cursor: String
  node: Product
}

input ProductToUpsellConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type ProductToVisibleProductConnection {
  edges: [ProductToVisibleProductConnectionEdge]
  nodes: [VisibleProduct]
  pageInfo: WPPageInfo
}

type ProductToVisibleProductConnectionEdge {
  cursor: String
  isPrimary: Boolean
  node: VisibleProduct
}

input ProductToVisibleProductConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductType implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentNodes(first: Int, last: Int, after: String, before: String, where: ProductTypeToContentNodeConnectionWhereArgs): ProductTypeToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  productTypeId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  seo: TaxonomySEO
  slug: String
  taxonomy: ProductTypeToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum ProductTypeIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type ProductTypeToContentNodeConnection {
  edges: [ProductTypeToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type ProductTypeToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input ProductTypeToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfProductTypeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type ProductTypeToTaxonomyConnectionEdge {
  node: Taxonomy
}

enum ProductTypesEnum {
  EXTERNAL
  GROUPED
  SIMPLE
  VARIABLE
  VARIATION
}

type ProductVariation implements Node & NodeWithFeaturedImage & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier {
  attributes(first: Int, last: Int, after: String, before: String): ProductVariationToVariationAttributeConnection
  backorders: BackordersEnum
  backordersAllowed: Boolean
  catalogVisibility: CatalogVisibilityEnum
  contentType: ContentNodeToContentTypeConnectionEdge
  databaseId: Int!
  date: String
  dateGmt: String
  dateOnSaleFrom: String
  dateOnSaleTo: String
  description: String
  desiredSlug: String
  downloadExpiry: Int
  downloadLimit: Int
  downloadable: Boolean
  downloads: [ProductDownload]
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  guid: String
  hasAttributes: Boolean
  height: String
  id: ID!
  image: MediaItem
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  length: String
  link: String
  manageStock: ManageStockEnum
  menuOrder: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  modifiedGmt: String
  name: String
  onSale: Boolean
  parent: ProductVariationToVariableProductConnectionEdge
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  price(format: PricingFieldFormatEnum): String
  purchasable: Boolean
  purchaseNote: String
  regularPrice(format: PricingFieldFormatEnum): String
  salePrice(format: PricingFieldFormatEnum): String
  shippingClass: String
  shippingClasses(first: Int, last: Int, after: String, before: String, where: ProductVariationToShippingClassConnectionWhereArgs): ProductVariationToShippingClassConnection
  sku: String
  slug: String
  status: String
  stockQuantity: Int
  stockStatus: StockStatusEnum
  taxClass: TaxClassEnum
  taxStatus: TaxStatusEnum
  template: ContentTemplate
  type: ProductTypesEnum
  uri: String
  virtual: Boolean
  visibleProducts(first: Int, last: Int, after: String, before: String, where: ProductVariationToVisibleProductConnectionWhereArgs): ProductVariationToVisibleProductConnection
  weight: String
  width: String
}

enum ProductVariationIdTypeEnum {
  DATABASE_ID
  ID
}

type ProductVariationToShippingClassConnection {
  edges: [ProductVariationToShippingClassConnectionEdge]
  nodes: [ShippingClass]
  pageInfo: WPPageInfo
}

type ProductVariationToShippingClassConnectionEdge {
  cursor: String
  node: ShippingClass
}

input ProductVariationToShippingClassConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type ProductVariationToVariableProductConnectionEdge {
  node: VariableProduct
}

type ProductVariationToVariationAttributeConnection {
  edges: [ProductVariationToVariationAttributeConnectionEdge]
  nodes: [VariationAttribute]
  pageInfo: WPPageInfo
}

type ProductVariationToVariationAttributeConnectionEdge {
  cursor: String
  node: VariationAttribute
}

type ProductVariationToVisibleProductConnection {
  edges: [ProductVariationToVisibleProductConnectionEdge]
  nodes: [VisibleProduct]
  pageInfo: WPPageInfo
}

type ProductVariationToVisibleProductConnectionEdge {
  cursor: String
  node: VisibleProduct
}

input ProductVariationToVisibleProductConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

enum ProductsOrderByEnum {
  DATE
  IN
  MENU_ORDER
  MODIFIED
  NAME_IN
  ON_SALE_FROM
  ON_SALE_TO
  PARENT
  PRICE
  RATING
  REGULAR_PRICE
  REVIEW_COUNT
  SALE_PRICE
  SLUG
  TOTAL_SALES
}

input ProductsOrderbyInput {
  field: ProductsOrderByEnum!
  order: OrderEnum
}

type ReadingSettings {
  postsPerPage: Int
}

type Refund implements Node {
  amount: Float
  databaseId: Int
  date: String
  id: ID!
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  reason: String
  refundedBy: User
  title: String
}

enum RefundIdTypeEnum {
  DATABASE_ID
  ID
}

input RegisterCustomerInput {
  aim: String
  billing: CustomerAddressInput
  clientMutationId: String
  description: String
  displayName: String
  email: String
  firstName: String
  jabber: String
  lastName: String
  locale: String
  metaData: [MetaDataInput]
  nicename: String
  nickname: String
  password: String
  registered: String
  richEditing: String
  shipping: CustomerAddressInput
  shippingSameAsBilling: Boolean
  username: String
  websiteUrl: String
  yim: String
}

type RegisterCustomerPayload {
  clientMutationId: String
  customer: Customer
  viewer: User
}

input RegisterUserInput {
  aim: String
  clientMutationId: String
  description: String
  displayName: String
  email: String
  firstName: String
  jabber: String
  lastName: String
  locale: String
  nicename: String
  nickname: String
  password: String
  registered: String
  richEditing: String
  username: String!
  websiteUrl: String
  yim: String
}

type RegisterUserPayload {
  clientMutationId: String
  user: User
}

enum RelationEnum {
  AND
  OR
}

input RemoveCouponsInput {
  clientMutationId: String
  codes: [String]
}

type RemoveCouponsPayload {
  cart: Cart
  clientMutationId: String
}

input RemoveItemsFromCartInput {
  all: Boolean
  clientMutationId: String
  keys: [ID]
}

type RemoveItemsFromCartPayload {
  cart: Cart
  cartItems: [CartItem]
  clientMutationId: String
}

input ResetUserPasswordInput {
  clientMutationId: String
  key: String
  login: String
  password: String
}

type ResetUserPasswordPayload {
  clientMutationId: String
  user: User
}

input RestoreCartItemsInput {
  clientMutationId: String
  keys: [ID]
}

type RestoreCartItemsPayload {
  cart: Cart
  cartItems: [CartItem]
  clientMutationId: String
}

input RestoreCommentInput {
  clientMutationId: String
  id: ID!
}

type RestoreCommentPayload {
  clientMutationId: String
  comment: Comment
  restoredId: ID
}

input RestoreReviewInput {
  clientMutationId: String
  id: ID!
}

type RestoreReviewPayload {
  affectedId: ID
  clientMutationId: String
  rating: Float
  review: Comment
}

type RootMutation {
  addCartItems(input: AddCartItemsInput!): AddCartItemsPayload
  addFee(input: AddFeeInput!): AddFeePayload
  addToCart(input: AddToCartInput!): AddToCartPayload
  applyCoupon(input: ApplyCouponInput!): ApplyCouponPayload
  checkout(input: CheckoutInput!): CheckoutPayload
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload
  createComment(input: CreateCommentInput!): CreateCommentPayload
  createCoupon(input: CreateCouponInput!): CreateCouponPayload
  createMediaItem(input: CreateMediaItemInput!): CreateMediaItemPayload
  createOrder(input: CreateOrderInput!): CreateOrderPayload
  createPaColor(input: CreatePaColorInput!): CreatePaColorPayload
  createPaSize(input: CreatePaSizeInput!): CreatePaSizePayload
  createPaWidth(input: CreatePaWidthInput!): CreatePaWidthPayload
  createPage(input: CreatePageInput!): CreatePagePayload
  createPost(input: CreatePostInput!): CreatePostPayload
  createPostFormat(input: CreatePostFormatInput!): CreatePostFormatPayload
  createProductCategory(input: CreateProductCategoryInput!): CreateProductCategoryPayload
  createProductTag(input: CreateProductTagInput!): CreateProductTagPayload
  createProductType(input: CreateProductTypeInput!): CreateProductTypePayload
  createShippingClass(input: CreateShippingClassInput!): CreateShippingClassPayload
  createTag(input: CreateTagInput!): CreateTagPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  createVisibleProduct(input: CreateVisibleProductInput!): CreateVisibleProductPayload
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload
  deleteCoupon(input: DeleteCouponInput!): DeleteCouponPayload
  deleteMediaItem(input: DeleteMediaItemInput!): DeleteMediaItemPayload
  deleteOrder(input: DeleteOrderInput!): DeleteOrderPayload
  deleteOrderItems(input: DeleteOrderItemsInput!): DeleteOrderItemsPayload
  deletePaColor(input: DeletePaColorInput!): DeletePaColorPayload
  deletePaSize(input: DeletePaSizeInput!): DeletePaSizePayload
  deletePaWidth(input: DeletePaWidthInput!): DeletePaWidthPayload
  deletePage(input: DeletePageInput!): DeletePagePayload
  deletePost(input: DeletePostInput!): DeletePostPayload
  deletePostFormat(input: DeletePostFormatInput!): DeletePostFormatPayload
  deleteProductCategory(input: DeleteProductCategoryInput!): DeleteProductCategoryPayload
  deleteProductTag(input: DeleteProductTagInput!): DeleteProductTagPayload
  deleteProductType(input: DeleteProductTypeInput!): DeleteProductTypePayload
  deleteReview(input: DeleteReviewInput!): DeleteReviewPayload
  deleteShippingClass(input: DeleteShippingClassInput!): DeleteShippingClassPayload
  deleteTag(input: DeleteTagInput!): DeleteTagPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  deleteVisibleProduct(input: DeleteVisibleProductInput!): DeleteVisibleProductPayload
  emptyCart(input: EmptyCartInput!): EmptyCartPayload
  fillCart(input: FillCartInput!): FillCartPayload
  increaseCount(count: Int): Int
  registerCustomer(input: RegisterCustomerInput!): RegisterCustomerPayload
  registerUser(input: RegisterUserInput!): RegisterUserPayload
  removeCoupons(input: RemoveCouponsInput!): RemoveCouponsPayload
  removeItemsFromCart(input: RemoveItemsFromCartInput!): RemoveItemsFromCartPayload
  resetUserPassword(input: ResetUserPasswordInput!): ResetUserPasswordPayload
  restoreCartItems(input: RestoreCartItemsInput!): RestoreCartItemsPayload
  restoreComment(input: RestoreCommentInput!): RestoreCommentPayload
  restoreReview(input: RestoreReviewInput!): RestoreReviewPayload
  sendPasswordResetEmail(input: SendPasswordResetEmailInput!): SendPasswordResetEmailPayload
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  updateCoupon(input: UpdateCouponInput!): UpdateCouponPayload
  updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload
  updateItemQuantities(input: UpdateItemQuantitiesInput!): UpdateItemQuantitiesPayload
  updateMediaItem(input: UpdateMediaItemInput!): UpdateMediaItemPayload
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload
  updatePaColor(input: UpdatePaColorInput!): UpdatePaColorPayload
  updatePaSize(input: UpdatePaSizeInput!): UpdatePaSizePayload
  updatePaWidth(input: UpdatePaWidthInput!): UpdatePaWidthPayload
  updatePage(input: UpdatePageInput!): UpdatePagePayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  updatePostFormat(input: UpdatePostFormatInput!): UpdatePostFormatPayload
  updateProductCategory(input: UpdateProductCategoryInput!): UpdateProductCategoryPayload
  updateProductTag(input: UpdateProductTagInput!): UpdateProductTagPayload
  updateProductType(input: UpdateProductTypeInput!): UpdateProductTypePayload
  updateReview(input: UpdateReviewInput!): UpdateReviewPayload
  updateSettings(input: UpdateSettingsInput!): UpdateSettingsPayload
  updateShippingClass(input: UpdateShippingClassInput!): UpdateShippingClassPayload
  updateShippingMethod(input: UpdateShippingMethodInput!): UpdateShippingMethodPayload
  updateTag(input: UpdateTagInput!): UpdateTagPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateVisibleProduct(input: UpdateVisibleProductInput!): UpdateVisibleProductPayload
  writeReview(input: WriteReviewInput!): WriteReviewPayload
}

type RootQuery {
  allSettings: Settings
  cart(recalculateTotals: Boolean): Cart
  cartFee(id: ID!): CartFee
  cartItem(key: ID!): CartItem
  categories(first: Int, last: Int, after: String, before: String, where: RootQueryToCategoryConnectionWhereArgs): RootQueryToCategoryConnection
  category(id: ID!, idType: CategoryIdType): Category
  comment(id: ID!): Comment
  comments(first: Int, last: Int, after: String, before: String, where: RootQueryToCommentConnectionWhereArgs): RootQueryToCommentConnection
  contentNode(id: ID!, idType: ContentNodeIdTypeEnum, contentType: ContentTypeEnum, asPreview: Boolean): ContentNode
  contentNodes(first: Int, last: Int, after: String, before: String, where: RootQueryToContentNodeConnectionWhereArgs): RootQueryToContentNodeConnection
  contentType(id: ID!, idType: ContentTypeIdTypeEnum): ContentType
  contentTypes(first: Int, last: Int, after: String, before: String): RootQueryToContentTypeConnection
  coupon(id: ID!, idType: CouponIdTypeEnum): Coupon
  coupons(first: Int, last: Int, after: String, before: String, where: RootQueryToCouponConnectionWhereArgs): RootQueryToCouponConnection
  customer(id: ID, customerId: Int): Customer
  customers(first: Int, last: Int, after: String, before: String, where: RootQueryToCustomerConnectionWhereArgs): RootQueryToCustomerConnection
  discussionSettings: DiscussionSettings
  externalProduct(id: ID, idType: ProductIdTypeEnum): ExternalProduct
  generalSettings: GeneralSettings
  groupedProduct(id: ID, idType: ProductIdTypeEnum): GroupProduct
  mediaItem(id: ID!, idType: MediaItemIdType, asPreview: Boolean): MediaItem
  mediaItemBy(id: ID, mediaItemId: Int, uri: String, slug: String): MediaItem @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  mediaItems(first: Int, last: Int, after: String, before: String, where: RootQueryToMediaItemConnectionWhereArgs): RootQueryToMediaItemConnection
  menu(id: ID!, idType: MenuNodeIdTypeEnum): Menu
  menuItem(id: ID!, idType: MenuItemNodeIdTypeEnum): MenuItem
  menuItems(first: Int, last: Int, after: String, before: String, where: RootQueryToMenuItemConnectionWhereArgs): RootQueryToMenuItemConnection
  menus(first: Int, last: Int, after: String, before: String, where: RootQueryToMenuConnectionWhereArgs): RootQueryToMenuConnection
  node(id: ID): Node
  nodeByUri(uri: String!): UniformResourceIdentifiable
  order(id: ID, idType: OrderIdTypeEnum): Order
  orders(first: Int, last: Int, after: String, before: String, where: RootQueryToOrderConnectionWhereArgs): RootQueryToOrderConnection
  paColor(id: ID!, idType: PaColorIdType): PaColor
  paColors(first: Int, last: Int, after: String, before: String, where: RootQueryToPaColorConnectionWhereArgs): RootQueryToPaColorConnection
  paSize(id: ID!, idType: PaSizeIdType): PaSize
  paSizes(first: Int, last: Int, after: String, before: String, where: RootQueryToPaSizeConnectionWhereArgs): RootQueryToPaSizeConnection
  paWidth(id: ID!, idType: PaWidthIdType): PaWidth
  paWidths(first: Int, last: Int, after: String, before: String, where: RootQueryToPaWidthConnectionWhereArgs): RootQueryToPaWidthConnection
  page(id: ID!, idType: PageIdType, asPreview: Boolean): Page
  pageBy(id: ID, pageId: Int, uri: String): Page @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  pages(first: Int, last: Int, after: String, before: String, where: RootQueryToPageConnectionWhereArgs): RootQueryToPageConnection
  paymentGateways(first: Int, last: Int, after: String, before: String, where: RootQueryToPaymentGatewayConnectionWhereArgs): RootQueryToPaymentGatewayConnection
  plugin(id: ID!): Plugin
  plugins(first: Int, last: Int, after: String, before: String): RootQueryToPluginConnection
  post(id: ID!, idType: PostIdType, asPreview: Boolean): Post
  postBy(id: ID, postId: Int, uri: String, slug: String): Post @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  postFormat(id: ID!, idType: PostFormatIdType): PostFormat
  postFormats(first: Int, last: Int, after: String, before: String, where: RootQueryToPostFormatConnectionWhereArgs): RootQueryToPostFormatConnection
  posts(first: Int, last: Int, after: String, before: String, where: RootQueryToPostConnectionWhereArgs): RootQueryToPostConnection
  product(id: ID!, idType: ProductIdTypeEnum): Product
  productCategories(first: Int, last: Int, after: String, before: String, where: RootQueryToProductCategoryConnectionWhereArgs): RootQueryToProductCategoryConnection
  productCategory(id: ID!, idType: ProductCategoryIdType): ProductCategory
  productTag(id: ID!, idType: ProductTagIdType): ProductTag
  productTags(first: Int, last: Int, after: String, before: String, where: RootQueryToProductTagConnectionWhereArgs): RootQueryToProductTagConnection
  productType(id: ID!, idType: ProductTypeIdType): ProductType
  productTypes(first: Int, last: Int, after: String, before: String, where: RootQueryToProductTypeConnectionWhereArgs): RootQueryToProductTypeConnection
  productVariation(id: ID, idType: ProductVariationIdTypeEnum): ProductVariation
  products(first: Int, last: Int, after: String, before: String, where: RootQueryToProductConnectionWhereArgs): RootQueryToProductConnection
  readingSettings: ReadingSettings
  refund(id: ID!, idType: RefundIdTypeEnum): Refund
  refunds(first: Int, last: Int, after: String, before: String, where: RootQueryToRefundConnectionWhereArgs): RootQueryToRefundConnection
  registeredScripts(first: Int, last: Int, after: String, before: String): RootQueryToEnqueuedScriptConnection
  registeredStylesheets(first: Int, last: Int, after: String, before: String): RootQueryToEnqueuedStylesheetConnection
  revisions(first: Int, last: Int, after: String, before: String, where: RootQueryToContentRevisionUnionConnectionWhereArgs): RootQueryToContentRevisionUnionConnection
  seo: SEOConfig
  shippingClass(id: ID!, idType: ShippingClassIdType): ShippingClass
  shippingClasses(first: Int, last: Int, after: String, before: String, where: RootQueryToShippingClassConnectionWhereArgs): RootQueryToShippingClassConnection
  shippingMethod(id: ID, idType: ShippingMethodIdTypeEnum): ShippingMethod
  shippingMethods(first: Int, last: Int, after: String, before: String): RootQueryToShippingMethodConnection
  simpleProduct(id: ID, idType: ProductIdTypeEnum): SimpleProduct
  tag(id: ID!, idType: TagIdType): Tag
  tags(first: Int, last: Int, after: String, before: String, where: RootQueryToTagConnectionWhereArgs): RootQueryToTagConnection
  taxRate(id: ID, idType: TaxRateIdTypeEnum): TaxRate
  taxRates(first: Int, last: Int, after: String, before: String, where: RootQueryToTaxRateConnectionWhereArgs): RootQueryToTaxRateConnection
  taxonomies(first: Int, last: Int, after: String, before: String): RootQueryToTaxonomyConnection
  taxonomy(id: ID!, idType: TaxonomyIdTypeEnum): Taxonomy
  termNode(id: ID!, idType: TermNodeIdTypeEnum, taxonomy: TaxonomyEnum): TermNode
  terms(first: Int, last: Int, after: String, before: String, where: RootQueryToTermNodeConnectionWhereArgs): RootQueryToTermNodeConnection
  theme(id: ID!): Theme
  themes(first: Int, last: Int, after: String, before: String): RootQueryToThemeConnection
  user(id: ID!, idType: UserNodeIdTypeEnum): User
  userRole(id: ID!): UserRole
  userRoles(first: Int, last: Int, after: String, before: String): RootQueryToUserRoleConnection
  users(first: Int, last: Int, after: String, before: String, where: RootQueryToUserConnectionWhereArgs): RootQueryToUserConnection
  variableProduct(id: ID, idType: ProductIdTypeEnum): VariableProduct
  viewer: User
  visibleProduct(id: ID!, idType: VisibleProductIdType): VisibleProduct
  visibleProducts(first: Int, last: Int, after: String, before: String, where: RootQueryToVisibleProductConnectionWhereArgs): RootQueryToVisibleProductConnection
  writingSettings: WritingSettings
}

type RootQueryToCategoryConnection {
  edges: [RootQueryToCategoryConnectionEdge]
  nodes: [Category]
  pageInfo: WPPageInfo
}

type RootQueryToCategoryConnectionEdge {
  cursor: String
  node: Category
}

input RootQueryToCategoryConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToCommentConnection {
  edges: [RootQueryToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type RootQueryToCommentConnectionEdge {
  cursor: String
  node: Comment
}

input RootQueryToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type RootQueryToContentNodeConnection {
  edges: [RootQueryToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type RootQueryToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input RootQueryToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type RootQueryToContentRevisionUnionConnection {
  edges: [RootQueryToContentRevisionUnionConnectionEdge]
  nodes: [ContentRevisionUnion]
  pageInfo: WPPageInfo
}

type RootQueryToContentRevisionUnionConnectionEdge {
  cursor: String
  node: ContentRevisionUnion
}

input RootQueryToContentRevisionUnionConnectionWhereArgs {
  contentTypes: [ContentTypeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type RootQueryToContentTypeConnection {
  edges: [RootQueryToContentTypeConnectionEdge]
  nodes: [ContentType]
  pageInfo: WPPageInfo
}

type RootQueryToContentTypeConnectionEdge {
  cursor: String
  node: ContentType
}

type RootQueryToCouponConnection {
  edges: [RootQueryToCouponConnectionEdge]
  nodes: [Coupon]
  pageInfo: WPPageInfo
}

type RootQueryToCouponConnectionEdge {
  cursor: String
  node: Coupon
}

input RootQueryToCouponConnectionWhereArgs {
  code: String
  dateQuery: DateQueryInput
  exclude: [Int]
  include: [Int]
  orderby: [PostTypeOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
}

type RootQueryToCustomerConnection {
  edges: [RootQueryToCustomerConnectionEdge]
  nodes: [Customer]
  pageInfo: WPPageInfo
}

type RootQueryToCustomerConnectionEdge {
  cursor: String
  node: Customer
}

input RootQueryToCustomerConnectionWhereArgs {
  email: String
  exclude: [Int]
  include: [Int]
  order: OrderEnum
  orderby: CustomerConnectionOrderbyEnum
  search: String
}

type RootQueryToEnqueuedScriptConnection {
  edges: [RootQueryToEnqueuedScriptConnectionEdge]
  nodes: [EnqueuedScript]
  pageInfo: WPPageInfo
}

type RootQueryToEnqueuedScriptConnectionEdge {
  cursor: String
  node: EnqueuedScript
}

type RootQueryToEnqueuedStylesheetConnection {
  edges: [RootQueryToEnqueuedStylesheetConnectionEdge]
  nodes: [EnqueuedStylesheet]
  pageInfo: WPPageInfo
}

type RootQueryToEnqueuedStylesheetConnectionEdge {
  cursor: String
  node: EnqueuedStylesheet
}

type RootQueryToMediaItemConnection {
  edges: [RootQueryToMediaItemConnectionEdge]
  nodes: [MediaItem]
  pageInfo: WPPageInfo
}

type RootQueryToMediaItemConnectionEdge {
  cursor: String
  node: MediaItem
}

input RootQueryToMediaItemConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type RootQueryToMenuConnection {
  edges: [RootQueryToMenuConnectionEdge]
  nodes: [Menu]
  pageInfo: WPPageInfo
}

type RootQueryToMenuConnectionEdge {
  cursor: String
  node: Menu
}

input RootQueryToMenuConnectionWhereArgs {
  id: Int
  location: MenuLocationEnum
  slug: String
}

type RootQueryToMenuItemConnection {
  edges: [RootQueryToMenuItemConnectionEdge]
  nodes: [MenuItem]
  pageInfo: WPPageInfo
}

type RootQueryToMenuItemConnectionEdge {
  cursor: String
  node: MenuItem
}

input RootQueryToMenuItemConnectionWhereArgs {
  id: Int
  location: MenuLocationEnum
  parentDatabaseId: Int
  parentId: ID
}

type RootQueryToOrderConnection {
  edges: [RootQueryToOrderConnectionEdge]
  nodes: [Order]
  pageInfo: WPPageInfo
}

type RootQueryToOrderConnectionEdge {
  cursor: String
  node: Order
}

input RootQueryToOrderConnectionWhereArgs {
  customerId: Int
  customersIn: [Int]
  dateQuery: DateQueryInput
  exclude: [Int]
  include: [Int]
  orderby: [OrdersOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  productId: Int
  search: String
  statuses: [OrderStatusEnum]
}

type RootQueryToPaColorConnection {
  edges: [RootQueryToPaColorConnectionEdge]
  nodes: [PaColor]
  pageInfo: WPPageInfo
}

type RootQueryToPaColorConnectionEdge {
  cursor: String
  node: PaColor
}

input RootQueryToPaColorConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToPaSizeConnection {
  edges: [RootQueryToPaSizeConnectionEdge]
  nodes: [PaSize]
  pageInfo: WPPageInfo
}

type RootQueryToPaSizeConnectionEdge {
  cursor: String
  node: PaSize
}

input RootQueryToPaSizeConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToPaWidthConnection {
  edges: [RootQueryToPaWidthConnectionEdge]
  nodes: [PaWidth]
  pageInfo: WPPageInfo
}

type RootQueryToPaWidthConnectionEdge {
  cursor: String
  node: PaWidth
}

input RootQueryToPaWidthConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToPageConnection {
  edges: [RootQueryToPageConnectionEdge]
  nodes: [Page]
  pageInfo: WPPageInfo
}

type RootQueryToPageConnectionEdge {
  cursor: String
  node: Page
}

input RootQueryToPageConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type RootQueryToPaymentGatewayConnection {
  edges: [RootQueryToPaymentGatewayConnectionEdge]
  nodes: [PaymentGateway]
  pageInfo: WPPageInfo
}

type RootQueryToPaymentGatewayConnectionEdge {
  cursor: String
  node: PaymentGateway
}

input RootQueryToPaymentGatewayConnectionWhereArgs {
  all: Boolean
}

type RootQueryToPluginConnection {
  edges: [RootQueryToPluginConnectionEdge]
  nodes: [Plugin]
  pageInfo: WPPageInfo
}

type RootQueryToPluginConnectionEdge {
  cursor: String
  node: Plugin
}

type RootQueryToPostConnection {
  edges: [RootQueryToPostConnectionEdge]
  nodes: [Post]
  pageInfo: WPPageInfo
}

type RootQueryToPostConnectionEdge {
  cursor: String
  node: Post
}

input RootQueryToPostConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  categoryId: Int
  categoryIn: [ID]
  categoryName: String
  categoryNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  tag: String
  tagId: String
  tagIn: [ID]
  tagNotIn: [ID]
  tagSlugAnd: [String]
  tagSlugIn: [String]
  title: String
}

type RootQueryToPostFormatConnection {
  edges: [RootQueryToPostFormatConnectionEdge]
  nodes: [PostFormat]
  pageInfo: WPPageInfo
}

type RootQueryToPostFormatConnectionEdge {
  cursor: String
  node: PostFormat
}

input RootQueryToPostFormatConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToProductCategoryConnection {
  edges: [RootQueryToProductCategoryConnectionEdge]
  nodes: [ProductCategory]
  pageInfo: WPPageInfo
}

type RootQueryToProductCategoryConnectionEdge {
  cursor: String
  node: ProductCategory
}

input RootQueryToProductCategoryConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToProductConnection {
  edges: [RootQueryToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type RootQueryToProductConnectionEdge {
  cursor: String
  node: Product
}

input RootQueryToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type RootQueryToProductTagConnection {
  edges: [RootQueryToProductTagConnectionEdge]
  nodes: [ProductTag]
  pageInfo: WPPageInfo
}

type RootQueryToProductTagConnectionEdge {
  cursor: String
  node: ProductTag
}

input RootQueryToProductTagConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToProductTypeConnection {
  edges: [RootQueryToProductTypeConnectionEdge]
  nodes: [ProductType]
  pageInfo: WPPageInfo
}

type RootQueryToProductTypeConnectionEdge {
  cursor: String
  node: ProductType
}

input RootQueryToProductTypeConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToRefundConnection {
  edges: [RootQueryToRefundConnectionEdge]
  nodes: [Refund]
  pageInfo: WPPageInfo
}

type RootQueryToRefundConnectionEdge {
  cursor: String
  node: Refund
}

input RootQueryToRefundConnectionWhereArgs {
  dateQuery: DateQueryInput
  exclude: [Int]
  include: [Int]
  orderIn: [Int]
  orderby: [PostTypeOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  statuses: [String]
}

type RootQueryToShippingClassConnection {
  edges: [RootQueryToShippingClassConnectionEdge]
  nodes: [ShippingClass]
  pageInfo: WPPageInfo
}

type RootQueryToShippingClassConnectionEdge {
  cursor: String
  node: ShippingClass
}

input RootQueryToShippingClassConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToShippingMethodConnection {
  edges: [RootQueryToShippingMethodConnectionEdge]
  nodes: [ShippingMethod]
  pageInfo: WPPageInfo
}

type RootQueryToShippingMethodConnectionEdge {
  cursor: String
  node: ShippingMethod
}

type RootQueryToTagConnection {
  edges: [RootQueryToTagConnectionEdge]
  nodes: [Tag]
  pageInfo: WPPageInfo
}

type RootQueryToTagConnectionEdge {
  cursor: String
  node: Tag
}

input RootQueryToTagConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToTaxRateConnection {
  edges: [RootQueryToTaxRateConnectionEdge]
  nodes: [TaxRate]
  pageInfo: WPPageInfo
}

type RootQueryToTaxRateConnectionEdge {
  cursor: String
  node: TaxRate
}

input RootQueryToTaxRateConnectionWhereArgs {
  class: TaxClassEnum
  orderby: [TaxRateConnectionOrderbyInput]
  postCode: String
  postCodeIn: [String]
}

type RootQueryToTaxonomyConnection {
  edges: [RootQueryToTaxonomyConnectionEdge]
  nodes: [Taxonomy]
  pageInfo: WPPageInfo
}

type RootQueryToTaxonomyConnectionEdge {
  cursor: String
  node: Taxonomy
}

type RootQueryToTermNodeConnection {
  edges: [RootQueryToTermNodeConnectionEdge]
  nodes: [TermNode]
  pageInfo: WPPageInfo
}

type RootQueryToTermNodeConnectionEdge {
  cursor: String
  node: TermNode
}

input RootQueryToTermNodeConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  taxonomies: [TaxonomyEnum]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type RootQueryToThemeConnection {
  edges: [RootQueryToThemeConnectionEdge]
  nodes: [Theme]
  pageInfo: WPPageInfo
}

type RootQueryToThemeConnectionEdge {
  cursor: String
  node: Theme
}

type RootQueryToUserConnection {
  edges: [RootQueryToUserConnectionEdge]
  nodes: [User]
  pageInfo: WPPageInfo
}

type RootQueryToUserConnectionEdge {
  cursor: String
  node: User
}

input RootQueryToUserConnectionWhereArgs {
  exclude: [Int]
  hasPublishedPosts: [ContentTypeEnum]
  include: [Int]
  login: String
  loginIn: [String]
  loginNotIn: [String]
  nicename: String
  nicenameIn: [String]
  nicenameNotIn: [String]
  orderby: [UsersConnectionOrderbyInput]
  role: UserRoleEnum
  roleIn: [UserRoleEnum]
  roleNotIn: [UserRoleEnum]
  search: String
  searchColumns: [UsersConnectionSearchColumnEnum]
}

type RootQueryToUserRoleConnection {
  edges: [RootQueryToUserRoleConnectionEdge]
  nodes: [UserRole]
  pageInfo: WPPageInfo
}

type RootQueryToUserRoleConnectionEdge {
  cursor: String
  node: UserRole
}

type RootQueryToVisibleProductConnection {
  edges: [RootQueryToVisibleProductConnectionEdge]
  nodes: [VisibleProduct]
  pageInfo: WPPageInfo
}

type RootQueryToVisibleProductConnectionEdge {
  cursor: String
  node: VisibleProduct
}

input RootQueryToVisibleProductConnectionWhereArgs {
  cacheDomain: String
  childOf: Int
  childless: Boolean
  descriptionLike: String
  exclude: [ID]
  excludeTree: [ID]
  hideEmpty: Boolean
  hierarchical: Boolean
  include: [ID]
  name: [String]
  nameLike: String
  objectIds: [ID]
  order: OrderEnum
  orderby: TermObjectsConnectionOrderbyEnum
  padCounts: Boolean
  parent: Int
  search: String
  slug: [String]
  termTaxonomId: [ID]
  updateTermMetaCache: Boolean
}

type SEOBreadcrumbs {
  archivePrefix: String
  boldLast: Boolean
  enabled: Boolean
  homeText: String
  notFoundText: String
  prefix: String
  searchPrefix: String
  separator: String
  showBlogPage: Boolean
}

enum SEOCardType {
  summary
  summary_large_image
}

type SEOConfig {
  breadcrumbs: SEOBreadcrumbs
  contentTypes: SEOContentTypes
  openGraph: SEOOpenGraph
  redirects: [SEORedirect]
  schema: SEOSchema
  social: SEOSocial
  webmaster: SEOWebmaster
}

type SEOContentType {
  archive: SEOContentTypeArchive
  metaDesc: String
  metaRobotsNoindex: Boolean
  schema: SEOPageInfoSchema
  schemaType: String
  title: String
}

type SEOContentTypeArchive {
  archiveLink: String
  breadcrumbTitle: String
  fullHead: String
  hasArchive: Boolean
  metaDesc: String
  metaRobotsNoindex: Boolean
  title: String
}

type SEOContentTypes {
  mediaItem: SEOContentType
  page: SEOContentType
  post: SEOContentType
  product: SEOContentType
}

type SEOOpenGraph {
  defaultImage: MediaItem
  frontPage: SEOOpenGraphFrontPage
}

type SEOOpenGraphFrontPage {
  description: String
  image: MediaItem
  title: String
}

type SEOPageInfoSchema {
  raw: String
}

type SEOPostTypeBreadcrumbs {
  text: String
  url: String
}

type SEOPostTypePageInfo {
  schema: SEOPageInfoSchema
}

type SEOPostTypeSchema {
  articleType: [String]
  pageType: [String]
  raw: String
}

type SEORedirect {
  format: String
  origin: String
  target: String
  type: Int
}

type SEOSchema {
  companyLogo: MediaItem
  companyName: String
  companyOrPerson: String
  inLanguage: String
  logo: MediaItem
  personLogo: MediaItem
  personName: String
  siteName: String
  siteUrl: String
  wordpressSiteName: String
}

type SEOSocial {
  facebook: SEOSocialFacebook
  instagram: SEOSocialInstagram
  linkedIn: SEOSocialLinkedIn
  mySpace: SEOSocialMySpace
  pinterest: SEOSocialPinterest
  twitter: SEOSocialTwitter
  wikipedia: SEOSocialWikipedia
  youTube: SEOSocialYoutube
}

type SEOSocialFacebook {
  defaultImage: MediaItem
  url: String
}

type SEOSocialInstagram {
  url: String
}

type SEOSocialLinkedIn {
  url: String
}

type SEOSocialMySpace {
  url: String
}

type SEOSocialPinterest {
  metaTag: String
  url: String
}

type SEOSocialTwitter {
  cardType: SEOCardType
  username: String
}

type SEOSocialWikipedia {
  url: String
}

type SEOSocialYoutube {
  url: String
}

type SEOTaxonomySchema {
  raw: String
}

type SEOUser {
  fullHead: String
  metaDesc: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  schema: SEOUserSchema
  social: SEOUserSocial
  title: String
}

type SEOUserSchema {
  raw: String
}

type SEOUserSocial {
  facebook: String
  instagram: String
  linkedIn: String
  mySpace: String
  pinterest: String
  soundCloud: String
  twitter: String
  wikipedia: String
  youTube: String
}

type SEOWebmaster {
  baiduVerify: String
  googleVerify: String
  msVerify: String
  yandexVerify: String
}

input SendPasswordResetEmailInput {
  clientMutationId: String
  username: String!
}

type SendPasswordResetEmailPayload {
  clientMutationId: String
  user: User
}

type Settings {
  discussionSettingsDefaultCommentStatus: String
  discussionSettingsDefaultPingStatus: String
  generalSettingsDateFormat: String
  generalSettingsDescription: String
  generalSettingsEmail: String
  generalSettingsLanguage: String
  generalSettingsStartOfWeek: Int
  generalSettingsTimeFormat: String
  generalSettingsTimezone: String
  generalSettingsTitle: String
  generalSettingsUrl: String
  readingSettingsPostsPerPage: Int
  writingSettingsDefaultCategory: Int
  writingSettingsDefaultPostFormat: String
  writingSettingsUseSmilies: Boolean
}

type ShippingClass implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentNodes(first: Int, last: Int, after: String, before: String, where: ShippingClassToContentNodeConnectionWhereArgs): ShippingClassToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  seo: TaxonomySEO
  shippingClassId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  slug: String
  taxonomy: ShippingClassToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum ShippingClassIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type ShippingClassToContentNodeConnection {
  edges: [ShippingClassToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type ShippingClassToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input ShippingClassToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfShippingClassEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type ShippingClassToTaxonomyConnectionEdge {
  node: Taxonomy
}

type ShippingLine {
  databaseId: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  methodTitle: String
  orderId: Int
  shippingMethod: ShippingMethod
  taxClass: TaxClassEnum
  taxes: [OrderItemTax]
  total: String
  totalTax: String
}

input ShippingLineInput {
  id: ID
  instanceId: String
  metaData: [MetaDataInput]
  methodId: String!
  methodTitle: String!
  total: String!
}

type ShippingMethod implements Node {
  databaseId: ID!
  description: String
  id: ID!
  title: String
}

enum ShippingMethodIdTypeEnum {
  DATABASE_ID
  ID
}

type ShippingPackage {
  packageDetails: String
  rates: [ShippingRate]
  supportsShippingCalculator: Boolean
}

type ShippingRate {
  cost: String
  id: ID!
  instanceId: Int
  label: String
  methodId: ID!
}

type SimpleAttribute implements Attribute {
  name: String
  value: String
}

type SimpleProduct implements Node & Product & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier {
  attributes(first: Int, last: Int, after: String, before: String, where: ProductToProductAttributeConnectionWhereArgs): ProductToProductAttributeConnection
  averageRating: Float
  backorders: BackordersEnum
  backordersAllowed: Boolean
  catalogVisibility: CatalogVisibilityEnum
  commentCount: Int
  commentStatus: String
  content(format: PostObjectFieldFormatEnum): String
  contentType: ContentNodeToContentTypeConnectionEdge
  crossSell(first: Int, last: Int, after: String, before: String, where: SimpleProductToProductConnectionWhereArgs): SimpleProductToProductConnection
  databaseId: Int!
  date: String
  dateGmt: String
  dateOnSaleFrom: String
  dateOnSaleTo: String
  defaultAttributes(first: Int, last: Int, after: String, before: String): SimpleProductToVariationAttributeConnection
  description(format: PostObjectFieldFormatEnum): String
  desiredSlug: String
  downloadExpiry: Int
  downloadLimit: Int
  downloadable: Boolean
  downloads: [ProductDownload]
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  featured: Boolean
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  galleryImages(first: Int, last: Int, after: String, before: String, where: ProductToMediaItemConnectionWhereArgs): ProductToMediaItemConnection
  globalAttributes(first: Int, last: Int, after: String, before: String, where: ProductToGlobalProductAttributeConnectionWhereArgs): ProductToGlobalProductAttributeConnection
  guid: String
  height: String
  id: ID!
  image: MediaItem
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  length: String
  link: String
  localAttributes(first: Int, last: Int, after: String, before: String, where: ProductToLocalProductAttributeConnectionWhereArgs): ProductToLocalProductAttributeConnection
  manageStock: Boolean
  menuOrder: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  modifiedGmt: String
  name: String
  onSale: Boolean
  paColors(first: Int, last: Int, after: String, before: String, where: ProductToPaColorConnectionWhereArgs): ProductToPaColorConnection
  paSizes(first: Int, last: Int, after: String, before: String, where: ProductToPaSizeConnectionWhereArgs): ProductToPaSizeConnection
  paWidths(first: Int, last: Int, after: String, before: String, where: ProductToPaWidthConnectionWhereArgs): ProductToPaWidthConnection
  parent: Product
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  price(format: PricingFieldFormatEnum): String
  productCategories(first: Int, last: Int, after: String, before: String, where: ProductToProductCategoryConnectionWhereArgs): ProductToProductCategoryConnection
  productTags(first: Int, last: Int, after: String, before: String, where: ProductToProductTagConnectionWhereArgs): ProductToProductTagConnection
  productTypes(first: Int, last: Int, after: String, before: String, where: ProductToProductTypeConnectionWhereArgs): ProductToProductTypeConnection
  purchasable: Boolean
  purchaseNote: String
  regularPrice(format: PricingFieldFormatEnum): String
  related(first: Int, last: Int, after: String, before: String, where: ProductToProductConnectionWhereArgs): ProductToProductConnection
  reviewCount: Int
  reviews(first: Int, last: Int, after: String, before: String, where: ProductToCommentConnectionWhereArgs): ProductToCommentConnection
  reviewsAllowed: Boolean
  salePrice(format: PricingFieldFormatEnum): String
  seo: PostTypeSEO
  shippingClassId: Int
  shippingClasses(first: Int, last: Int, after: String, before: String, where: ProductToShippingClassConnectionWhereArgs): ProductToShippingClassConnection
  shippingRequired: Boolean
  shippingTaxable: Boolean
  shortDescription(format: PostObjectFieldFormatEnum): String
  sku: String
  slug: String
  soldIndividually: Boolean
  status: String
  stockQuantity: Int
  stockStatus: StockStatusEnum
  taxClass: TaxClassEnum
  taxStatus: TaxStatusEnum
  template: ContentTemplate
  totalSales: Int
  type: ProductTypesEnum
  upsell(first: Int, last: Int, after: String, before: String, where: ProductToUpsellConnectionWhereArgs): ProductToUpsellConnection
  uri: String
  virtual: Boolean
  visibleProducts(first: Int, last: Int, after: String, before: String, where: ProductToVisibleProductConnectionWhereArgs): ProductToVisibleProductConnection
  weight: String
  width: String
}

type SimpleProductToProductConnection {
  edges: [SimpleProductToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type SimpleProductToProductConnectionEdge {
  cursor: String
  node: Product
}

input SimpleProductToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type SimpleProductToVariationAttributeConnection {
  edges: [SimpleProductToVariationAttributeConnectionEdge]
  nodes: [VariationAttribute]
  pageInfo: WPPageInfo
}

type SimpleProductToVariationAttributeConnectionEdge {
  cursor: String
  node: VariationAttribute
}

enum StockStatusEnum {
  IN_STOCK
  ON_BACKORDER
  OUT_OF_STOCK
}

type Tag implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier & MenuItemLinkable {
  contentNodes(first: Int, last: Int, after: String, before: String, where: TagToContentNodeConnectionWhereArgs): TagToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  posts(first: Int, last: Int, after: String, before: String, where: TagToPostConnectionWhereArgs): TagToPostConnection
  seo: TaxonomySEO
  slug: String
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  taxonomy: TagToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum TagIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type TagToContentNodeConnection {
  edges: [TagToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type TagToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input TagToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfTagEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type TagToPostConnection {
  edges: [TagToPostConnectionEdge]
  nodes: [Post]
  pageInfo: WPPageInfo
}

type TagToPostConnectionEdge {
  cursor: String
  node: Post
}

input TagToPostConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  categoryId: Int
  categoryIn: [ID]
  categoryName: String
  categoryNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  tag: String
  tagId: String
  tagIn: [ID]
  tagNotIn: [ID]
  tagSlugAnd: [String]
  tagSlugIn: [String]
  title: String
}

type TagToTaxonomyConnectionEdge {
  node: Taxonomy
}

enum TaxClassEnum {
  INHERIT_CART
  REDUCED_RATE
  STANDARD
  ZERO_RATE
}

type TaxLine {
  databaseId: Int
  isCompound: Boolean
  label: String
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  orderId: Int
  rateCode: String
  shippingTaxTotal: String
  taxRate: TaxRate
  taxTotal: String
}

type TaxRate implements Node {
  city: [String]
  class: TaxClassEnum
  compound: Boolean
  country: String
  databaseId: Int
  id: ID!
  name: String
  order: Int
  postcode: [String]
  priority: Int
  rate: String
  shipping: Boolean
  state: String
}

enum TaxRateConnectionOrderbyEnum {
  ID
  ORDER
}

input TaxRateConnectionOrderbyInput {
  field: TaxRateConnectionOrderbyEnum!
  order: OrderEnum
}

enum TaxRateIdTypeEnum {
  DATABASE_ID
  ID
}

enum TaxStatusEnum {
  NONE
  SHIPPING
  TAXABLE
}

type Taxonomy implements Node {
  connectedContentTypes(first: Int, last: Int, after: String, before: String): TaxonomyToContentTypeConnection
  description: String
  graphqlPluralName: String
  graphqlSingleName: String
  hierarchical: Boolean
  id: ID!
  isRestricted: Boolean
  label: String
  name: String
  public: Boolean
  restBase: String
  restControllerClass: String
  showCloud: Boolean
  showInAdminColumn: Boolean
  showInGraphql: Boolean
  showInMenu: Boolean
  showInNavMenus: Boolean
  showInQuickEdit: Boolean
  showInRest: Boolean
  showUi: Boolean
}

enum TaxonomyEnum {
  CATEGORY
  PACOLOR
  PASIZE
  PAWIDTH
  POSTFORMAT
  PRODUCTCATEGORY
  PRODUCTTAG
  PRODUCTTYPE
  SHIPPINGCLASS
  TAG
  VISIBLEPRODUCT
}

enum TaxonomyIdTypeEnum {
  ID
  NAME
}

enum TaxonomyOperatorEnum {
  AND
  EXISTS
  IN
  NOT_EXISTS
  NOT_IN
}

type TaxonomySEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  schema: SEOTaxonomySchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

type TaxonomyToContentTypeConnection {
  edges: [TaxonomyToContentTypeConnectionEdge]
  nodes: [ContentType]
  pageInfo: WPPageInfo
}

type TaxonomyToContentTypeConnectionEdge {
  cursor: String
  node: ContentType
}

type Template_FullWidth implements ContentTemplate {
  templateName: String
}

type Template_Homepage implements ContentTemplate {
  templateName: String
}

interface TermNode implements Node & UniformResourceIdentifiable {
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  slug: String
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
}

enum TermNodeIdTypeEnum {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type TermNodeToEnqueuedScriptConnection {
  edges: [TermNodeToEnqueuedScriptConnectionEdge]
  nodes: [EnqueuedScript]
  pageInfo: WPPageInfo
}

type TermNodeToEnqueuedScriptConnectionEdge {
  cursor: String
  node: EnqueuedScript
}

type TermNodeToEnqueuedStylesheetConnection {
  edges: [TermNodeToEnqueuedStylesheetConnectionEdge]
  nodes: [EnqueuedStylesheet]
  pageInfo: WPPageInfo
}

type TermNodeToEnqueuedStylesheetConnectionEdge {
  cursor: String
  node: EnqueuedStylesheet
}

enum TermObjectsConnectionOrderbyEnum {
  COUNT
  DESCRIPTION
  NAME
  SLUG
  TERM_GROUP
  TERM_ID
  TERM_ORDER
}

type Theme implements Node {
  author: String
  authorUri: String
  description: String
  id: ID!
  isRestricted: Boolean
  name: String
  screenshot: String
  slug: String
  tags: [String]
  themeUri: String
  version: String
}

interface UniformResourceIdentifiable {
  id: ID!
  isContentNode: Boolean!
  isTermNode: Boolean!
  uri: String
}

input UpdateCategoryInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  parentId: ID
  slug: String
}

type UpdateCategoryPayload {
  category: Category
  clientMutationId: String
}

input UpdateCommentInput {
  approved: String
  author: String
  authorEmail: String
  authorUrl: String
  clientMutationId: String
  commentOn: Int
  content: String
  date: String
  id: ID!
  parent: ID
  type: String
}

type UpdateCommentPayload {
  clientMutationId: String
  comment: Comment
  success: Boolean
}

input UpdateCouponInput {
  amount: Float
  clientMutationId: String
  code: String
  dateExpires: String
  dateExpiresGmt: String
  description: String
  discountType: DiscountTypeEnum
  emailRestrictions: [String]
  excludeSaleItems: Boolean
  excludedProductCategories: [Int]
  excludedProductIds: [Int]
  freeShipping: Boolean
  id: ID!
  individualUse: Boolean
  limitUsageToXItems: Int
  maximumAmount: String
  metaData: [MetaDataInput]
  minimumAmount: String
  productCategories: [Int]
  productIds: [Int]
  usageLimit: Int
  usageLimitPerUser: Int
}

type UpdateCouponPayload {
  clientMutationId: String
  code: String
  coupon: Coupon
}

input UpdateCustomerInput {
  aim: String
  billing: CustomerAddressInput
  clientMutationId: String
  description: String
  displayName: String
  email: String
  firstName: String
  id: ID
  jabber: String
  lastName: String
  locale: String
  metaData: [MetaDataInput]
  nicename: String
  nickname: String
  password: String
  registered: String
  richEditing: String
  roles: [String]
  shipping: CustomerAddressInput
  shippingSameAsBilling: Boolean
  websiteUrl: String
  yim: String
}

type UpdateCustomerPayload {
  clientMutationId: String
  customer: Customer
}

input UpdateItemQuantitiesInput {
  clientMutationId: String
  items: [CartItemQuantityInput]
}

type UpdateItemQuantitiesPayload {
  cart: Cart
  clientMutationId: String
  items: [CartItem]
  removed: [CartItem]
  updated: [CartItem]
}

input UpdateMediaItemInput {
  altText: String
  authorId: ID
  caption: String
  clientMutationId: String
  commentStatus: String
  date: String
  dateGmt: String
  description: String
  filePath: String
  fileType: MimeTypeEnum
  id: ID!
  parentId: ID
  pingStatus: String
  slug: String
  status: MediaItemStatusEnum
  title: String
}

type UpdateMediaItemPayload {
  clientMutationId: String
  mediaItem: MediaItem
}

input UpdateOrderInput {
  billing: CustomerAddressInput
  clientMutationId: String
  coupons: [String]
  currency: String
  customerId: Int
  customerNote: String
  feeLines: [FeeLineInput]
  id: ID
  isPaid: Boolean
  lineItems: [LineItemInput]
  metaData: [MetaDataInput]
  orderId: Int
  parentId: Int
  paymentMethod: String
  paymentMethodTitle: String
  shipping: CustomerAddressInput
  shippingLines: [ShippingLineInput]
  status: OrderStatusEnum
  transactionId: String
}

type UpdateOrderPayload {
  clientMutationId: String
  order: Order
}

input UpdatePaColorInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdatePaColorPayload {
  clientMutationId: String
  paColor: PaColor
}

input UpdatePaSizeInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdatePaSizePayload {
  clientMutationId: String
  paSize: PaSize
}

input UpdatePaWidthInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdatePaWidthPayload {
  clientMutationId: String
  paWidth: PaWidth
}

input UpdatePageInput {
  authorId: ID
  clientMutationId: String
  commentStatus: String
  content: String
  date: String
  id: ID!
  menuOrder: Int
  parentId: ID
  password: String
  slug: String
  status: PostStatusEnum
  title: String
}

type UpdatePagePayload {
  clientMutationId: String
  page: Page
}

input UpdatePostFormatInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdatePostFormatPayload {
  clientMutationId: String
  postFormat: PostFormat
}

input UpdatePostInput {
  authorId: ID
  categories: PostCategoriesInput
  clientMutationId: String
  commentStatus: String
  content: String
  date: String
  excerpt: String
  id: ID!
  menuOrder: Int
  password: String
  pingStatus: String
  pinged: [String]
  postFormats: PostPostFormatsInput
  slug: String
  status: PostStatusEnum
  tags: PostTagsInput
  title: String
  toPing: [String]
}

type UpdatePostPayload {
  clientMutationId: String
  post: Post
}

input UpdateProductCategoryInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  parentId: ID
  slug: String
}

type UpdateProductCategoryPayload {
  clientMutationId: String
  productCategory: ProductCategory
}

input UpdateProductTagInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdateProductTagPayload {
  clientMutationId: String
  productTag: ProductTag
}

input UpdateProductTypeInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdateProductTypePayload {
  clientMutationId: String
  productType: ProductType
}

input UpdateReviewInput {
  approved: String
  author: String
  authorEmail: String
  authorUrl: String
  clientMutationId: String
  commentOn: Int
  content: String
  date: String
  id: ID!
  parent: ID
  rating: Int!
}

type UpdateReviewPayload {
  clientMutationId: String
  rating: Float
  review: Comment
}

input UpdateSettingsInput {
  clientMutationId: String
  discussionSettingsDefaultCommentStatus: String
  discussionSettingsDefaultPingStatus: String
  generalSettingsDateFormat: String
  generalSettingsDescription: String
  generalSettingsEmail: String
  generalSettingsLanguage: String
  generalSettingsStartOfWeek: Int
  generalSettingsTimeFormat: String
  generalSettingsTimezone: String
  generalSettingsTitle: String
  generalSettingsUrl: String
  readingSettingsPostsPerPage: Int
  writingSettingsDefaultCategory: Int
  writingSettingsDefaultPostFormat: String
  writingSettingsUseSmilies: Boolean
}

type UpdateSettingsPayload {
  allSettings: Settings
  clientMutationId: String
  discussionSettings: DiscussionSettings
  generalSettings: GeneralSettings
  readingSettings: ReadingSettings
  writingSettings: WritingSettings
}

input UpdateShippingClassInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdateShippingClassPayload {
  clientMutationId: String
  shippingClass: ShippingClass
}

input UpdateShippingMethodInput {
  clientMutationId: String
  shippingMethods: [String]
}

type UpdateShippingMethodPayload {
  cart: Cart
  clientMutationId: String
}

input UpdateTagInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdateTagPayload {
  clientMutationId: String
  tag: Tag
}

input UpdateUserInput {
  aim: String
  clientMutationId: String
  description: String
  displayName: String
  email: String
  firstName: String
  id: ID!
  jabber: String
  lastName: String
  locale: String
  nicename: String
  nickname: String
  password: String
  registered: String
  richEditing: String
  roles: [String]
  websiteUrl: String
  yim: String
}

type UpdateUserPayload {
  clientMutationId: String
  user: User
}

input UpdateVisibleProductInput {
  aliasOf: String
  clientMutationId: String
  description: String
  id: ID!
  name: String
  slug: String
}

type UpdateVisibleProductPayload {
  clientMutationId: String
  visibleProduct: VisibleProduct
}

type User implements Node & UniformResourceIdentifiable & Commenter & DatabaseIdentifier {
  avatar(size: Int = 96, forceDefault: Boolean, rating: AvatarRatingEnum): Avatar
  capKey: String
  capabilities: [String]
  comments(first: Int, last: Int, after: String, before: String, where: UserToCommentConnectionWhereArgs): UserToCommentConnection
  databaseId: Int!
  description: String
  email: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): UserToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): UserToEnqueuedStylesheetConnection
  extraCapabilities: [String]
  firstName: String
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  lastName: String
  locale: String
  mediaItems(first: Int, last: Int, after: String, before: String, where: UserToMediaItemConnectionWhereArgs): UserToMediaItemConnection
  name: String
  nicename: String
  nickname: String
  pages(first: Int, last: Int, after: String, before: String, where: UserToPageConnectionWhereArgs): UserToPageConnection
  posts(first: Int, last: Int, after: String, before: String, where: UserToPostConnectionWhereArgs): UserToPostConnection
  registeredDate: String
  revisions(first: Int, last: Int, after: String, before: String, where: UserToContentRevisionUnionConnectionWhereArgs): UserToContentRevisionUnionConnection
  roles(first: Int, last: Int, after: String, before: String): UserToUserRoleConnection
  seo: SEOUser
  slug: String
  uri: String
  url: String
  userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  username: String
  wooSessionToken: String
}

enum UserNodeIdTypeEnum {
  DATABASE_ID
  EMAIL
  ID
  SLUG
  URI
  USERNAME
}

type UserRole implements Node {
  capabilities: [String]
  displayName: String
  id: ID!
  isRestricted: Boolean
  name: String
}

enum UserRoleEnum {
  AUTHOR
  CONTRIBUTOR
  CUSTOMER
  EDITOR
  SEO_EDITOR
  SEO_MANAGER
  SHOP_MANAGER
  SUBSCRIBER
}

type UserToCommentConnection {
  edges: [UserToCommentConnectionEdge]
  nodes: [Comment]
  pageInfo: WPPageInfo
}

type UserToCommentConnectionEdge {
  cursor: String
  node: Comment
}

input UserToCommentConnectionWhereArgs {
  authorEmail: String
  authorIn: [ID]
  authorNotIn: [ID]
  authorUrl: String
  commentIn: [ID]
  commentNotIn: [ID]
  commentType: String
  commentTypeIn: [String]
  commentTypeNotIn: String
  contentAuthor: [ID]
  contentAuthorIn: [ID]
  contentAuthorNotIn: [ID]
  contentId: ID
  contentIdIn: [ID]
  contentIdNotIn: [ID]
  contentName: String
  contentParent: Int
  contentStatus: [PostStatusEnum]
  contentType: [ContentTypeEnum]
  includeUnapproved: [ID]
  karma: Int
  order: OrderEnum
  orderby: CommentsConnectionOrderbyEnum
  parent: Int
  parentIn: [ID]
  parentNotIn: [ID]
  search: String
  status: String
  userId: ID
}

type UserToContentRevisionUnionConnection {
  edges: [UserToContentRevisionUnionConnectionEdge]
  nodes: [ContentRevisionUnion]
  pageInfo: WPPageInfo
}

type UserToContentRevisionUnionConnectionEdge {
  cursor: String
  node: ContentRevisionUnion
}

input UserToContentRevisionUnionConnectionWhereArgs {
  contentTypes: [ContentTypeEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type UserToEnqueuedScriptConnection {
  edges: [UserToEnqueuedScriptConnectionEdge]
  nodes: [EnqueuedScript]
  pageInfo: WPPageInfo
}

type UserToEnqueuedScriptConnectionEdge {
  cursor: String
  node: EnqueuedScript
}

type UserToEnqueuedStylesheetConnection {
  edges: [UserToEnqueuedStylesheetConnectionEdge]
  nodes: [EnqueuedStylesheet]
  pageInfo: WPPageInfo
}

type UserToEnqueuedStylesheetConnectionEdge {
  cursor: String
  node: EnqueuedStylesheet
}

type UserToMediaItemConnection {
  edges: [UserToMediaItemConnectionEdge]
  nodes: [MediaItem]
  pageInfo: WPPageInfo
}

type UserToMediaItemConnectionEdge {
  cursor: String
  node: MediaItem
}

input UserToMediaItemConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type UserToPageConnection {
  edges: [UserToPageConnectionEdge]
  nodes: [Page]
  pageInfo: WPPageInfo
}

type UserToPageConnectionEdge {
  cursor: String
  node: Page
}

input UserToPageConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type UserToPostConnection {
  edges: [UserToPostConnectionEdge]
  nodes: [Post]
  pageInfo: WPPageInfo
}

type UserToPostConnectionEdge {
  cursor: String
  node: Post
}

input UserToPostConnectionWhereArgs {
  author: Int
  authorIn: [ID]
  authorName: String
  authorNotIn: [ID]
  categoryId: Int
  categoryIn: [ID]
  categoryName: String
  categoryNotIn: [ID]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  tag: String
  tagId: String
  tagIn: [ID]
  tagNotIn: [ID]
  tagSlugAnd: [String]
  tagSlugIn: [String]
  title: String
}

type UserToUserRoleConnection {
  edges: [UserToUserRoleConnectionEdge]
  nodes: [UserRole]
  pageInfo: WPPageInfo
}

type UserToUserRoleConnectionEdge {
  cursor: String
  node: UserRole
}

enum UsersConnectionOrderbyEnum {
  DISPLAY_NAME
  EMAIL
  LOGIN
  LOGIN_IN
  NICE_NAME
  NICE_NAME_IN
  REGISTERED
  URL
}

input UsersConnectionOrderbyInput {
  field: UsersConnectionOrderbyEnum!
  order: OrderEnum
}

enum UsersConnectionSearchColumnEnum {
  EMAIL
  ID
  LOGIN
  NICENAME
  URL
}

type VariableProduct implements Node & Product & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & ContentNode & UniformResourceIdentifiable & DatabaseIdentifier {
  attributes(first: Int, last: Int, after: String, before: String, where: ProductToProductAttributeConnectionWhereArgs): ProductToProductAttributeConnection
  averageRating: Float
  backorders: BackordersEnum
  backordersAllowed: Boolean
  catalogVisibility: CatalogVisibilityEnum
  commentCount: Int
  commentStatus: String
  content(format: PostObjectFieldFormatEnum): String
  contentType: ContentNodeToContentTypeConnectionEdge
  crossSell(first: Int, last: Int, after: String, before: String, where: VariableProductToProductConnectionWhereArgs): VariableProductToProductConnection
  databaseId: Int!
  date: String
  dateGmt: String
  dateOnSaleFrom: String
  dateOnSaleTo: String
  defaultAttributes(first: Int, last: Int, after: String, before: String): VariableProductToVariationAttributeConnection
  description(format: PostObjectFieldFormatEnum): String
  desiredSlug: String
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  enclosure: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): ContentNodeToEnqueuedStylesheetConnection
  featured: Boolean
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  featuredImageDatabaseId: Int
  featuredImageId: ID
  galleryImages(first: Int, last: Int, after: String, before: String, where: ProductToMediaItemConnectionWhereArgs): ProductToMediaItemConnection
  globalAttributes(first: Int, last: Int, after: String, before: String, where: ProductToGlobalProductAttributeConnectionWhereArgs): ProductToGlobalProductAttributeConnection
  guid: String
  height: String
  id: ID!
  image: MediaItem
  isContentNode: Boolean!
  isPreview: Boolean
  isRestricted: Boolean
  isTermNode: Boolean!
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  length: String
  link: String
  localAttributes(first: Int, last: Int, after: String, before: String, where: ProductToLocalProductAttributeConnectionWhereArgs): ProductToLocalProductAttributeConnection
  manageStock: Boolean
  menuOrder: Int
  metaData(key: String, keysIn: [String], multiple: Boolean): [MetaData]
  modified: String
  modifiedGmt: String
  name: String
  onSale: Boolean
  paColors(first: Int, last: Int, after: String, before: String, where: ProductToPaColorConnectionWhereArgs): ProductToPaColorConnection
  paSizes(first: Int, last: Int, after: String, before: String, where: ProductToPaSizeConnectionWhereArgs): ProductToPaSizeConnection
  paWidths(first: Int, last: Int, after: String, before: String, where: ProductToPaWidthConnectionWhereArgs): ProductToPaWidthConnection
  parent: Product
  previewRevisionDatabaseId: Int
  previewRevisionId: ID
  price(format: PricingFieldFormatEnum): String
  productCategories(first: Int, last: Int, after: String, before: String, where: ProductToProductCategoryConnectionWhereArgs): ProductToProductCategoryConnection
  productTags(first: Int, last: Int, after: String, before: String, where: ProductToProductTagConnectionWhereArgs): ProductToProductTagConnection
  productTypes(first: Int, last: Int, after: String, before: String, where: ProductToProductTypeConnectionWhereArgs): ProductToProductTypeConnection
  purchasable: Boolean
  purchaseNote: String
  regularPrice(format: PricingFieldFormatEnum): String
  related(first: Int, last: Int, after: String, before: String, where: ProductToProductConnectionWhereArgs): ProductToProductConnection
  reviewCount: Int
  reviews(first: Int, last: Int, after: String, before: String, where: ProductToCommentConnectionWhereArgs): ProductToCommentConnection
  reviewsAllowed: Boolean
  salePrice(format: PricingFieldFormatEnum): String
  seo: PostTypeSEO
  shippingClassId: Int
  shippingClasses(first: Int, last: Int, after: String, before: String, where: ProductToShippingClassConnectionWhereArgs): ProductToShippingClassConnection
  shippingRequired: Boolean
  shippingTaxable: Boolean
  shortDescription(format: PostObjectFieldFormatEnum): String
  sku: String
  slug: String
  soldIndividually: Boolean
  status: String
  stockQuantity: Int
  stockStatus: StockStatusEnum
  taxClass: TaxClassEnum
  taxStatus: TaxStatusEnum
  template: ContentTemplate
  totalSales: Int
  type: ProductTypesEnum
  upsell(first: Int, last: Int, after: String, before: String, where: ProductToUpsellConnectionWhereArgs): ProductToUpsellConnection
  uri: String
  variations(first: Int, last: Int, after: String, before: String, where: VariableProductToProductVariationConnectionWhereArgs): VariableProductToProductVariationConnection
  visibleProducts(first: Int, last: Int, after: String, before: String, where: ProductToVisibleProductConnectionWhereArgs): ProductToVisibleProductConnection
  weight: String
  width: String
}

type VariableProductToProductConnection {
  edges: [VariableProductToProductConnectionEdge]
  nodes: [Product]
  pageInfo: WPPageInfo
}

type VariableProductToProductConnectionEdge {
  cursor: String
  node: Product
}

input VariableProductToProductConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type VariableProductToProductVariationConnection {
  edges: [VariableProductToProductVariationConnectionEdge]
  nodes: [ProductVariation]
  pageInfo: WPPageInfo
}

type VariableProductToProductVariationConnectionEdge {
  cursor: String
  node: ProductVariation
}

input VariableProductToProductVariationConnectionWhereArgs {
  attribute: String
  attributeTerm: String
  category: String
  categoryId: Int
  categoryIdIn: [Int]
  categoryIdNotIn: [Int]
  categoryIn: [String]
  categoryNotIn: [String]
  dateQuery: DateQueryInput
  exclude: [Int]
  featured: Boolean
  include: [Int]
  maxPrice: Float
  minPrice: Float
  onSale: Boolean
  orderby: [ProductsOrderbyInput]
  parent: Int
  parentIn: [Int]
  parentNotIn: [Int]
  search: String
  shippingClassId: Int
  sku: String
  slugIn: [String]
  status: String
  stockStatus: [StockStatusEnum]
  supportedTypesOnly: Boolean
  tag: String
  tagId: Int
  tagIdIn: [Int]
  tagIdNotIn: [Int]
  tagIn: [String]
  tagNotIn: [String]
  taxonomyFilter: ProductTaxonomyInput
  type: ProductTypesEnum
  typeIn: [ProductTypesEnum]
  typeNotIn: [ProductTypesEnum]
  visibility: CatalogVisibilityEnum
}

type VariableProductToVariationAttributeConnection {
  edges: [VariableProductToVariationAttributeConnectionEdge]
  nodes: [VariationAttribute]
  pageInfo: WPPageInfo
}

type VariableProductToVariationAttributeConnectionEdge {
  cursor: String
  node: VariationAttribute
}

type VariationAttribute implements Attribute {
  attributeId: Int
  id: ID!
  label: String
  name: String
  value: String
}

type VisibleProduct implements Node & TermNode & UniformResourceIdentifiable & DatabaseIdentifier {
  contentNodes(first: Int, last: Int, after: String, before: String, where: VisibleProductToContentNodeConnectionWhereArgs): VisibleProductToContentNodeConnection
  count: Int
  databaseId: Int!
  description: String
  enqueuedScripts(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedScriptConnection
  enqueuedStylesheets(first: Int, last: Int, after: String, before: String): TermNodeToEnqueuedStylesheetConnection
  id: ID!
  isContentNode: Boolean!
  isRestricted: Boolean
  isTermNode: Boolean!
  link: String
  name: String
  seo: TaxonomySEO
  slug: String
  taxonomy: VisibleProductToTaxonomyConnectionEdge
  termGroupId: Int
  termTaxonomyId: Int
  uri: String
  visibleProductId: Int @deprecated(reason: "Deprecated in favor of databaseId")
}

enum VisibleProductIdType {
  DATABASE_ID
  ID
  NAME
  SLUG
  URI
}

type VisibleProductToContentNodeConnection {
  edges: [VisibleProductToContentNodeConnectionEdge]
  nodes: [ContentNode]
  pageInfo: WPPageInfo
}

type VisibleProductToContentNodeConnectionEdge {
  cursor: String
  node: ContentNode
}

input VisibleProductToContentNodeConnectionWhereArgs {
  contentTypes: [ContentTypesOfVisibleProductEnum]
  dateQuery: DateQueryInput
  hasPassword: Boolean
  id: Int
  in: [ID]
  mimeType: MimeTypeEnum
  name: String
  nameIn: [String]
  notIn: [ID]
  orderby: [PostObjectsConnectionOrderbyInput]
  parent: ID
  parentIn: [ID]
  parentNotIn: [ID]
  password: String
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum
  title: String
}

type VisibleProductToTaxonomyConnectionEdge {
  node: Taxonomy
}

type WPPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  seo: SEOPostTypePageInfo
  startCursor: String
  total: Int
}

input WriteReviewInput {
  approved: String
  author: String
  authorEmail: String
  authorUrl: String
  clientMutationId: String
  commentOn: Int
  content: String
  date: String
  parent: ID
  rating: Int!
}

type WriteReviewPayload {
  clientMutationId: String
  rating: Float
  review: Comment
}

type WritingSettings {
  defaultCategory: Int
  defaultPostFormat: String
  useSmilies: Boolean
}
